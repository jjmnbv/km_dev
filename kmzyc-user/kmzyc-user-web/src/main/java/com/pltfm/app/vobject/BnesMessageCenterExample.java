package com.pltfm.app.vobject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class BnesMessageCenterExample {
  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  protected String orderByClause;

  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  protected List oredCriteria;

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public BnesMessageCenterExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  protected BnesMessageCenterExample(BnesMessageCenterExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * BNES_MESSAGE_CENTER
   *
   * @ibatorgenerated Tue Jul 23 09:26:02 CST 2013
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    protected void addCriterionForJDBCDate(String condition, Date value, String property) {
      addCriterion(condition, new java.sql.Date(value.getTime()), property);
    }

    protected void addCriterionForJDBCDate(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      List dateList = new ArrayList();
      Iterator iter = values.iterator();
      while (iter.hasNext()) {
        dateList.add(new java.sql.Date(((Date) iter.next()).getTime()));
      }
      addCriterion(condition, dateList, property);
    }

    protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
        String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      addCriterion(condition, new java.sql.Date(value1.getTime()),
          new java.sql.Date(value2.getTime()), property);
    }

    public Criteria andMessageIdIsNull() {
      addCriterion("MESSAGE_ID is null");
      return this;
    }

    public Criteria andMessageIdIsNotNull() {
      addCriterion("MESSAGE_ID is not null");
      return this;
    }

    public Criteria andMessageIdEqualTo(BigDecimal value) {
      addCriterion("MESSAGE_ID =", value, "messageId");
      return this;
    }

    public Criteria andMessageIdNotEqualTo(BigDecimal value) {
      addCriterion("MESSAGE_ID <>", value, "messageId");
      return this;
    }

    public Criteria andMessageIdGreaterThan(BigDecimal value) {
      addCriterion("MESSAGE_ID >", value, "messageId");
      return this;
    }

    public Criteria andMessageIdGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("MESSAGE_ID >=", value, "messageId");
      return this;
    }

    public Criteria andMessageIdLessThan(BigDecimal value) {
      addCriterion("MESSAGE_ID <", value, "messageId");
      return this;
    }

    public Criteria andMessageIdLessThanOrEqualTo(BigDecimal value) {
      addCriterion("MESSAGE_ID <=", value, "messageId");
      return this;
    }

    public Criteria andMessageIdIn(List values) {
      addCriterion("MESSAGE_ID in", values, "messageId");
      return this;
    }

    public Criteria andMessageIdNotIn(List values) {
      addCriterion("MESSAGE_ID not in", values, "messageId");
      return this;
    }

    public Criteria andMessageIdBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("MESSAGE_ID between", value1, value2, "messageId");
      return this;
    }

    public Criteria andMessageIdNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("MESSAGE_ID not between", value1, value2, "messageId");
      return this;
    }

    public Criteria andAccountIdIsNull() {
      addCriterion("ACCOUNT_ID is null");
      return this;
    }

    public Criteria andAccountIdIsNotNull() {
      addCriterion("ACCOUNT_ID is not null");
      return this;
    }

    public Criteria andAccountIdEqualTo(BigDecimal value) {
      addCriterion("ACCOUNT_ID =", value, "accountId");
      return this;
    }

    public Criteria andAccountIdNotEqualTo(BigDecimal value) {
      addCriterion("ACCOUNT_ID <>", value, "accountId");
      return this;
    }

    public Criteria andAccountIdGreaterThan(BigDecimal value) {
      addCriterion("ACCOUNT_ID >", value, "accountId");
      return this;
    }

    public Criteria andAccountIdGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("ACCOUNT_ID >=", value, "accountId");
      return this;
    }

    public Criteria andAccountIdLessThan(BigDecimal value) {
      addCriterion("ACCOUNT_ID <", value, "accountId");
      return this;
    }

    public Criteria andAccountIdLessThanOrEqualTo(BigDecimal value) {
      addCriterion("ACCOUNT_ID <=", value, "accountId");
      return this;
    }

    public Criteria andAccountIdIn(List values) {
      addCriterion("ACCOUNT_ID in", values, "accountId");
      return this;
    }

    public Criteria andAccountIdNotIn(List values) {
      addCriterion("ACCOUNT_ID not in", values, "accountId");
      return this;
    }

    public Criteria andAccountIdBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("ACCOUNT_ID between", value1, value2, "accountId");
      return this;
    }

    public Criteria andAccountIdNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("ACCOUNT_ID not between", value1, value2, "accountId");
      return this;
    }

    public Criteria andCheckDateIsNull() {
      addCriterion("CHECK_DATE is null");
      return this;
    }

    public Criteria andCheckDateIsNotNull() {
      addCriterion("CHECK_DATE is not null");
      return this;
    }

    public Criteria andCheckDateEqualTo(Date value) {
      addCriterionForJDBCDate("CHECK_DATE =", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateNotEqualTo(Date value) {
      addCriterionForJDBCDate("CHECK_DATE <>", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateGreaterThan(Date value) {
      addCriterionForJDBCDate("CHECK_DATE >", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateGreaterThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("CHECK_DATE >=", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateLessThan(Date value) {
      addCriterionForJDBCDate("CHECK_DATE <", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateLessThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("CHECK_DATE <=", value, "checkDate");
      return this;
    }

    public Criteria andCheckDateIn(List values) {
      addCriterionForJDBCDate("CHECK_DATE in", values, "checkDate");
      return this;
    }

    public Criteria andCheckDateNotIn(List values) {
      addCriterionForJDBCDate("CHECK_DATE not in", values, "checkDate");
      return this;
    }

    public Criteria andCheckDateBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("CHECK_DATE between", value1, value2, "checkDate");
      return this;
    }

    public Criteria andCheckDateNotBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("CHECK_DATE not between", value1, value2, "checkDate");
      return this;
    }

    public Criteria andStatusIsNull() {
      addCriterion("STATUS is null");
      return this;
    }

    public Criteria andStatusIsNotNull() {
      addCriterion("STATUS is not null");
      return this;
    }

    public Criteria andStatusEqualTo(Short value) {
      addCriterion("STATUS =", value, "status");
      return this;
    }

    public Criteria andStatusNotEqualTo(Short value) {
      addCriterion("STATUS <>", value, "status");
      return this;
    }

    public Criteria andStatusGreaterThan(Short value) {
      addCriterion("STATUS >", value, "status");
      return this;
    }

    public Criteria andStatusGreaterThanOrEqualTo(Short value) {
      addCriterion("STATUS >=", value, "status");
      return this;
    }

    public Criteria andStatusLessThan(Short value) {
      addCriterion("STATUS <", value, "status");
      return this;
    }

    public Criteria andStatusLessThanOrEqualTo(Short value) {
      addCriterion("STATUS <=", value, "status");
      return this;
    }

    public Criteria andStatusIn(List values) {
      addCriterion("STATUS in", values, "status");
      return this;
    }

    public Criteria andStatusNotIn(List values) {
      addCriterion("STATUS not in", values, "status");
      return this;
    }

    public Criteria andStatusBetween(Short value1, Short value2) {
      addCriterion("STATUS between", value1, value2, "status");
      return this;
    }

    public Criteria andStatusNotBetween(Short value1, Short value2) {
      addCriterion("STATUS not between", value1, value2, "status");
      return this;
    }

    public Criteria andInfoPromptIdIsNull() {
      addCriterion("INFO_PROMPT_ID is null");
      return this;
    }

    public Criteria andInfoPromptIdIsNotNull() {
      addCriterion("INFO_PROMPT_ID is not null");
      return this;
    }

    public Criteria andInfoPromptIdEqualTo(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID =", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdNotEqualTo(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID <>", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdGreaterThan(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID >", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID >=", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdLessThan(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID <", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdLessThanOrEqualTo(BigDecimal value) {
      addCriterion("INFO_PROMPT_ID <=", value, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdIn(List values) {
      addCriterion("INFO_PROMPT_ID in", values, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdNotIn(List values) {
      addCriterion("INFO_PROMPT_ID not in", values, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("INFO_PROMPT_ID between", value1, value2, "infoPromptId");
      return this;
    }

    public Criteria andInfoPromptIdNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("INFO_PROMPT_ID not between", value1, value2, "infoPromptId");
      return this;
    }
  }
}
