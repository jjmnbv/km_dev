package com.pltfm.app.vobject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class SafeQuestionInfoExample {
  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  protected String orderByClause;

  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  protected List oredCriteria;

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public SafeQuestionInfoExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  protected SafeQuestionInfoExample(SafeQuestionInfoExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Abator for iBATIS. This class corresponds to the database table
   * SAFE_QUESTION_INFO
   *
   * @abatorgenerated Tue Aug 06 10:56:22 CST 2013
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    protected void addCriterionForJDBCDate(String condition, Date value, String property) {
      addCriterion(condition, new java.sql.Date(value.getTime()), property);
    }

    protected void addCriterionForJDBCDate(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      List dateList = new ArrayList();
      Iterator iter = values.iterator();
      while (iter.hasNext()) {
        dateList.add(new java.sql.Date(((Date) iter.next()).getTime()));
      }
      addCriterion(condition, dateList, property);
    }

    protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
        String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      addCriterion(condition, new java.sql.Date(value1.getTime()),
          new java.sql.Date(value2.getTime()), property);
    }

    public Criteria andNSafeQuestionIdIsNull() {
      addCriterion("N_SAFE_QUESTION_ID is null");
      return this;
    }

    public Criteria andNSafeQuestionIdIsNotNull() {
      addCriterion("N_SAFE_QUESTION_ID is not null");
      return this;
    }

    public Criteria andNSafeQuestionIdEqualTo(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID =", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdNotEqualTo(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID <>", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdGreaterThan(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID >", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID >=", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdLessThan(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID <", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdLessThanOrEqualTo(BigDecimal value) {
      addCriterion("N_SAFE_QUESTION_ID <=", value, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdIn(List values) {
      addCriterion("N_SAFE_QUESTION_ID in", values, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdNotIn(List values) {
      addCriterion("N_SAFE_QUESTION_ID not in", values, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_SAFE_QUESTION_ID between", value1, value2, "nSafeQuestionId");
      return this;
    }

    public Criteria andNSafeQuestionIdNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_SAFE_QUESTION_ID not between", value1, value2, "nSafeQuestionId");
      return this;
    }

    public Criteria andQuestionNameIsNull() {
      addCriterion("QUESTION_NAME is null");
      return this;
    }

    public Criteria andQuestionNameIsNotNull() {
      addCriterion("QUESTION_NAME is not null");
      return this;
    }

    public Criteria andQuestionNameEqualTo(String value) {
      addCriterion("QUESTION_NAME =", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameNotEqualTo(String value) {
      addCriterion("QUESTION_NAME <>", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameGreaterThan(String value) {
      addCriterion("QUESTION_NAME >", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameGreaterThanOrEqualTo(String value) {
      addCriterion("QUESTION_NAME >=", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameLessThan(String value) {
      addCriterion("QUESTION_NAME <", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameLessThanOrEqualTo(String value) {
      addCriterion("QUESTION_NAME <=", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameLike(String value) {
      addCriterion("QUESTION_NAME like", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameNotLike(String value) {
      addCriterion("QUESTION_NAME not like", value, "questionName");
      return this;
    }

    public Criteria andQuestionNameIn(List values) {
      addCriterion("QUESTION_NAME in", values, "questionName");
      return this;
    }

    public Criteria andQuestionNameNotIn(List values) {
      addCriterion("QUESTION_NAME not in", values, "questionName");
      return this;
    }

    public Criteria andQuestionNameBetween(String value1, String value2) {
      addCriterion("QUESTION_NAME between", value1, value2, "questionName");
      return this;
    }

    public Criteria andQuestionNameNotBetween(String value1, String value2) {
      addCriterion("QUESTION_NAME not between", value1, value2, "questionName");
      return this;
    }

    public Criteria andDCreateDateIsNull() {
      addCriterion("D_CREATE_DATE is null");
      return this;
    }

    public Criteria andDCreateDateIsNotNull() {
      addCriterion("D_CREATE_DATE is not null");
      return this;
    }

    public Criteria andDCreateDateEqualTo(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE =", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateNotEqualTo(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE <>", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateGreaterThan(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE >", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateGreaterThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE >=", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateLessThan(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE <", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateLessThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_CREATE_DATE <=", value, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateIn(List values) {
      addCriterionForJDBCDate("D_CREATE_DATE in", values, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateNotIn(List values) {
      addCriterionForJDBCDate("D_CREATE_DATE not in", values, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_CREATE_DATE between", value1, value2, "dCreateDate");
      return this;
    }

    public Criteria andDCreateDateNotBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_CREATE_DATE not between", value1, value2, "dCreateDate");
      return this;
    }

    public Criteria andNCreatedIsNull() {
      addCriterion("N_CREATED is null");
      return this;
    }

    public Criteria andNCreatedIsNotNull() {
      addCriterion("N_CREATED is not null");
      return this;
    }

    public Criteria andNCreatedEqualTo(BigDecimal value) {
      addCriterion("N_CREATED =", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedNotEqualTo(BigDecimal value) {
      addCriterion("N_CREATED <>", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedGreaterThan(BigDecimal value) {
      addCriterion("N_CREATED >", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("N_CREATED >=", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedLessThan(BigDecimal value) {
      addCriterion("N_CREATED <", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedLessThanOrEqualTo(BigDecimal value) {
      addCriterion("N_CREATED <=", value, "nCreated");
      return this;
    }

    public Criteria andNCreatedIn(List values) {
      addCriterion("N_CREATED in", values, "nCreated");
      return this;
    }

    public Criteria andNCreatedNotIn(List values) {
      addCriterion("N_CREATED not in", values, "nCreated");
      return this;
    }

    public Criteria andNCreatedBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_CREATED between", value1, value2, "nCreated");
      return this;
    }

    public Criteria andNCreatedNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_CREATED not between", value1, value2, "nCreated");
      return this;
    }

    public Criteria andDModifyDateIsNull() {
      addCriterion("D_MODIFY_DATE is null");
      return this;
    }

    public Criteria andDModifyDateIsNotNull() {
      addCriterion("D_MODIFY_DATE is not null");
      return this;
    }

    public Criteria andDModifyDateEqualTo(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE =", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateNotEqualTo(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE <>", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateGreaterThan(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE >", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateGreaterThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE >=", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateLessThan(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE <", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateLessThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_MODIFY_DATE <=", value, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateIn(List values) {
      addCriterionForJDBCDate("D_MODIFY_DATE in", values, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateNotIn(List values) {
      addCriterionForJDBCDate("D_MODIFY_DATE not in", values, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_MODIFY_DATE between", value1, value2, "dModifyDate");
      return this;
    }

    public Criteria andDModifyDateNotBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_MODIFY_DATE not between", value1, value2, "dModifyDate");
      return this;
    }

    public Criteria andNModifiedIsNull() {
      addCriterion("N_MODIFIED is null");
      return this;
    }

    public Criteria andNModifiedIsNotNull() {
      addCriterion("N_MODIFIED is not null");
      return this;
    }

    public Criteria andNModifiedEqualTo(BigDecimal value) {
      addCriterion("N_MODIFIED =", value, "nModified");
      return this;
    }

    public Criteria andNModifiedNotEqualTo(BigDecimal value) {
      addCriterion("N_MODIFIED <>", value, "nModified");
      return this;
    }

    public Criteria andNModifiedGreaterThan(BigDecimal value) {
      addCriterion("N_MODIFIED >", value, "nModified");
      return this;
    }

    public Criteria andNModifiedGreaterThanOrEqualTo(BigDecimal value) {
      addCriterion("N_MODIFIED >=", value, "nModified");
      return this;
    }

    public Criteria andNModifiedLessThan(BigDecimal value) {
      addCriterion("N_MODIFIED <", value, "nModified");
      return this;
    }

    public Criteria andNModifiedLessThanOrEqualTo(BigDecimal value) {
      addCriterion("N_MODIFIED <=", value, "nModified");
      return this;
    }

    public Criteria andNModifiedIn(List values) {
      addCriterion("N_MODIFIED in", values, "nModified");
      return this;
    }

    public Criteria andNModifiedNotIn(List values) {
      addCriterion("N_MODIFIED not in", values, "nModified");
      return this;
    }

    public Criteria andNModifiedBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_MODIFIED between", value1, value2, "nModified");
      return this;
    }

    public Criteria andNModifiedNotBetween(BigDecimal value1, BigDecimal value2) {
      addCriterion("N_MODIFIED not between", value1, value2, "nModified");
      return this;
    }

    public Criteria andStatusIsNull() {
      addCriterion("STATUS is null");
      return this;
    }

    public Criteria andStatusIsNotNull() {
      addCriterion("STATUS is not null");
      return this;
    }

    public Criteria andStatusEqualTo(Short value) {
      addCriterion("STATUS =", value, "status");
      return this;
    }

    public Criteria andStatusNotEqualTo(Short value) {
      addCriterion("STATUS <>", value, "status");
      return this;
    }

    public Criteria andStatusGreaterThan(Short value) {
      addCriterion("STATUS >", value, "status");
      return this;
    }

    public Criteria andStatusGreaterThanOrEqualTo(Short value) {
      addCriterion("STATUS >=", value, "status");
      return this;
    }

    public Criteria andStatusLessThan(Short value) {
      addCriterion("STATUS <", value, "status");
      return this;
    }

    public Criteria andStatusLessThanOrEqualTo(Short value) {
      addCriterion("STATUS <=", value, "status");
      return this;
    }

    public Criteria andStatusIn(List values) {
      addCriterion("STATUS in", values, "status");
      return this;
    }

    public Criteria andStatusNotIn(List values) {
      addCriterion("STATUS not in", values, "status");
      return this;
    }

    public Criteria andStatusBetween(Short value1, Short value2) {
      addCriterion("STATUS between", value1, value2, "status");
      return this;
    }

    public Criteria andStatusNotBetween(Short value1, Short value2) {
      addCriterion("STATUS not between", value1, value2, "status");
      return this;
    }
  }
}
