package com.pltfm.app.vobject;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class LatestLoginExample {
  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  protected String orderByClause;

  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  protected List oredCriteria;

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public LatestLoginExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  protected LatestLoginExample(LatestLoginExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Abator for iBATIS. This class corresponds to the database table
   * LATEST_LOGIN
   *
   * @abatorgenerated Wed Jul 24 10:23:01 CST 2013
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    protected void addCriterionForJDBCDate(String condition, Date value, String property) {
      addCriterion(condition, new java.sql.Date(value.getTime()), property);
    }

    protected void addCriterionForJDBCDate(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      List dateList = new ArrayList();
      Iterator iter = values.iterator();
      while (iter.hasNext()) {
        dateList.add(new java.sql.Date(((Date) iter.next()).getTime()));
      }
      addCriterion(condition, dateList, property);
    }

    protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
        String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      addCriterion(condition, new java.sql.Date(value1.getTime()),
          new java.sql.Date(value2.getTime()), property);
    }

    public Criteria andNIdIsNull() {
      addCriterion("N_ID is null");
      return this;
    }

    public Criteria andNIdIsNotNull() {
      addCriterion("N_ID is not null");
      return this;
    }

    public Criteria andNIdEqualTo(Integer value) {
      addCriterion("N_ID =", value, "nId");
      return this;
    }

    public Criteria andNIdNotEqualTo(Integer value) {
      addCriterion("N_ID <>", value, "nId");
      return this;
    }

    public Criteria andNIdGreaterThan(Integer value) {
      addCriterion("N_ID >", value, "nId");
      return this;
    }

    public Criteria andNIdGreaterThanOrEqualTo(Integer value) {
      addCriterion("N_ID >=", value, "nId");
      return this;
    }

    public Criteria andNIdLessThan(Integer value) {
      addCriterion("N_ID <", value, "nId");
      return this;
    }

    public Criteria andNIdLessThanOrEqualTo(Integer value) {
      addCriterion("N_ID <=", value, "nId");
      return this;
    }

    public Criteria andNIdIn(List values) {
      addCriterion("N_ID in", values, "nId");
      return this;
    }

    public Criteria andNIdNotIn(List values) {
      addCriterion("N_ID not in", values, "nId");
      return this;
    }

    public Criteria andNIdBetween(Integer value1, Integer value2) {
      addCriterion("N_ID between", value1, value2, "nId");
      return this;
    }

    public Criteria andNIdNotBetween(Integer value1, Integer value2) {
      addCriterion("N_ID not between", value1, value2, "nId");
      return this;
    }

    public Criteria andNLoginIdIsNull() {
      addCriterion("N_LOGIN_ID is null");
      return this;
    }

    public Criteria andNLoginIdIsNotNull() {
      addCriterion("N_LOGIN_ID is not null");
      return this;
    }

    public Criteria andNLoginIdEqualTo(Integer value) {
      addCriterion("N_LOGIN_ID =", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdNotEqualTo(Integer value) {
      addCriterion("N_LOGIN_ID <>", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdGreaterThan(Integer value) {
      addCriterion("N_LOGIN_ID >", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdGreaterThanOrEqualTo(Integer value) {
      addCriterion("N_LOGIN_ID >=", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdLessThan(Integer value) {
      addCriterion("N_LOGIN_ID <", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdLessThanOrEqualTo(Integer value) {
      addCriterion("N_LOGIN_ID <=", value, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdIn(List values) {
      addCriterion("N_LOGIN_ID in", values, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdNotIn(List values) {
      addCriterion("N_LOGIN_ID not in", values, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdBetween(Integer value1, Integer value2) {
      addCriterion("N_LOGIN_ID between", value1, value2, "nLoginId");
      return this;
    }

    public Criteria andNLoginIdNotBetween(Integer value1, Integer value2) {
      addCriterion("N_LOGIN_ID not between", value1, value2, "nLoginId");
      return this;
    }

    public Criteria andDDateIsNull() {
      addCriterion("D_DATE is null");
      return this;
    }

    public Criteria andDDateIsNotNull() {
      addCriterion("D_DATE is not null");
      return this;
    }

    public Criteria andDDateEqualTo(Date value) {
      addCriterionForJDBCDate("D_DATE =", value, "dDate");
      return this;
    }

    public Criteria andDDateNotEqualTo(Date value) {
      addCriterionForJDBCDate("D_DATE <>", value, "dDate");
      return this;
    }

    public Criteria andDDateGreaterThan(Date value) {
      addCriterionForJDBCDate("D_DATE >", value, "dDate");
      return this;
    }

    public Criteria andDDateGreaterThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_DATE >=", value, "dDate");
      return this;
    }

    public Criteria andDDateLessThan(Date value) {
      addCriterionForJDBCDate("D_DATE <", value, "dDate");
      return this;
    }

    public Criteria andDDateLessThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("D_DATE <=", value, "dDate");
      return this;
    }

    public Criteria andDDateIn(List values) {
      addCriterionForJDBCDate("D_DATE in", values, "dDate");
      return this;
    }

    public Criteria andDDateNotIn(List values) {
      addCriterionForJDBCDate("D_DATE not in", values, "dDate");
      return this;
    }

    public Criteria andDDateBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_DATE between", value1, value2, "dDate");
      return this;
    }

    public Criteria andDDateNotBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("D_DATE not between", value1, value2, "dDate");
      return this;
    }

    public Criteria andLoginIpIsNull() {
      addCriterion("LOGIN_IP is null");
      return this;
    }

    public Criteria andLoginIpIsNotNull() {
      addCriterion("LOGIN_IP is not null");
      return this;
    }

    public Criteria andLoginIpEqualTo(String value) {
      addCriterion("LOGIN_IP =", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpNotEqualTo(String value) {
      addCriterion("LOGIN_IP <>", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpGreaterThan(String value) {
      addCriterion("LOGIN_IP >", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpGreaterThanOrEqualTo(String value) {
      addCriterion("LOGIN_IP >=", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpLessThan(String value) {
      addCriterion("LOGIN_IP <", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpLessThanOrEqualTo(String value) {
      addCriterion("LOGIN_IP <=", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpLike(String value) {
      addCriterion("LOGIN_IP like", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpNotLike(String value) {
      addCriterion("LOGIN_IP not like", value, "loginIp");
      return this;
    }

    public Criteria andLoginIpIn(List values) {
      addCriterion("LOGIN_IP in", values, "loginIp");
      return this;
    }

    public Criteria andLoginIpNotIn(List values) {
      addCriterion("LOGIN_IP not in", values, "loginIp");
      return this;
    }

    public Criteria andLoginIpBetween(String value1, String value2) {
      addCriterion("LOGIN_IP between", value1, value2, "loginIp");
      return this;
    }

    public Criteria andLoginIpNotBetween(String value1, String value2) {
      addCriterion("LOGIN_IP not between", value1, value2, "loginIp");
      return this;
    }

    public Criteria andLoginModuleIsNull() {
      addCriterion("LOGIN_MODULE is null");
      return this;
    }

    public Criteria andLoginModuleIsNotNull() {
      addCriterion("LOGIN_MODULE is not null");
      return this;
    }

    public Criteria andLoginModuleEqualTo(String value) {
      addCriterion("LOGIN_MODULE =", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleNotEqualTo(String value) {
      addCriterion("LOGIN_MODULE <>", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleGreaterThan(String value) {
      addCriterion("LOGIN_MODULE >", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleGreaterThanOrEqualTo(String value) {
      addCriterion("LOGIN_MODULE >=", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleLessThan(String value) {
      addCriterion("LOGIN_MODULE <", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleLessThanOrEqualTo(String value) {
      addCriterion("LOGIN_MODULE <=", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleLike(String value) {
      addCriterion("LOGIN_MODULE like", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleNotLike(String value) {
      addCriterion("LOGIN_MODULE not like", value, "loginModule");
      return this;
    }

    public Criteria andLoginModuleIn(List values) {
      addCriterion("LOGIN_MODULE in", values, "loginModule");
      return this;
    }

    public Criteria andLoginModuleNotIn(List values) {
      addCriterion("LOGIN_MODULE not in", values, "loginModule");
      return this;
    }

    public Criteria andLoginModuleBetween(String value1, String value2) {
      addCriterion("LOGIN_MODULE between", value1, value2, "loginModule");
      return this;
    }

    public Criteria andLoginModuleNotBetween(String value1, String value2) {
      addCriterion("LOGIN_MODULE not between", value1, value2, "loginModule");
      return this;
    }
  }
}
