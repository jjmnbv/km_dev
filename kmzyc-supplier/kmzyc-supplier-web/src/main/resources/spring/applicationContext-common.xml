<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
 	<!-- 开启注解扫描 -->
    <context:annotation-config />
	<context:component-scan base-package="com.kmzyc"/>
	<aop:aspectj-autoproxy />
	
	<bean id="propertyConfigurer" class="com.kmzyc.zkconfig.ZKPropertyPlaceholderConfigurer">
		<constructor-arg ref="zkClient"/>
		<property name="zkPaths">
			<list>
                <value>/kmconfig/commons/redis.properties</value>
				<value>/kmconfig/km-supplier/jdbc.properties</value>
				<value>/kmconfig/km-supplier/config.properties</value>
				<value>/kmconfig/km-supplier/memcached.properties</value>
				<value>/kmconfig/km-supplier/loginCheck.properties</value>
				<value>/kmconfig/km-supplier/messageSendConfig.properties</value>
				<value>/kmconfig/km-supplier/cachedKey.properties</value>
				<value>/kmconfig/km-supplier/remoteService.properties</value>
				<value>/kmconfig/km-supplier/zk.properties</value>
				<value>/kmconfig/km-supplier/dubbo.properties</value>
			</list>
		</property>
	</bean>
	<bean id="zkClient" class="com.kmzyc.zkconfig.CuratorFrameworkFactoryBean"/>
	<bean id="logisticsMap" class="com.kmzyc.zkconfig.ConfigurationUtil"
		  factory-method="load">
		<constructor-arg ref="zkClient"/>
		<constructor-arg value="/kmconfig/commons/logistics.properties"/>
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${dburl}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<!-- 超过时间限制是否回收 -->  
		<property name="removeAbandoned" value="true" /> 
		<!-- 超时时间；单位为秒。 -->  
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />  
		<!-- 关闭abanded连接时输出错误日志 -->  
		<property name="logAbandoned" value="true" />   	   
		<property name="name" value="dataSourceCustomer" />
		<property name="username" value="${dbUsername}" />
		<property name="password" value="${dbPassword}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:ibatis/sqlmap-product-config.xml" />
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="transactionManagerDynamic" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- 配置JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- Activates @Transactional for DefaultImageDatabase -->
    <tx:annotation-driven transaction-manager="transactionManagerDynamic" proxy-target-class="true" order="2"/>

    <bean id="keyWordsFilter" class="com.kmzyc.framework.filter.KeyWordsFilter"></bean>
</beans>
