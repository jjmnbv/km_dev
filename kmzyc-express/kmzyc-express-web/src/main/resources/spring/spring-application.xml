<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${driverClassName}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="maxIdleTime" value="${maxIdleTime}"/>
        <property name="acquireIncrement" value="${acquireIncrement}"/>
        <property name="maxStatements" value="${maxStatements}"/>
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>
        <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}"/>
        <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}"/>
    </bean>
    <!-- 结束 -->

    <!-- Spring提供的iBatis的SqlMap配置 -->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="configLocation"
                  value="classpath:com/kmzyc/express/sqlmap/sql-map-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用拦截器管理事物 -->
    <bean id="abstractTxDefinition"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          abstract="true">
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED,-ServiceException</prop>
            </props>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 开启注解扫描 -->
    <context:annotation-config/>
    <context:component-scan base-package="com"/>

    <!-- zookeeper管理 -->
    <bean id="propertyConfigurer"
          class="com.kmzyc.zkconfig.ZKPropertyPlaceholderConfigurer">
        <constructor-arg ref="zkClient"/>
        <property name="zkPaths">
            <list>
                <value>/kmconfig/km-express/config.properties</value>
                <value>/kmconfig/km-express/quartz.properties</value>
                <value>/kmconfig/commons/redis.properties</value>
                <value>/kmconfig/commons/dubbo.properties</value>
                <value>/kmconfig/commons/jdbc.properties</value>
            </list>
        </property>
    </bean>
    <bean id="zkClient" class="com.kmzyc.zkconfig.CuratorFrameworkFactoryBean"/>


    <!-- redis -->
    <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
        <constructor-arg name="nodes">
            <set>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${redis.host_1}"/>
                    <constructor-arg name="port" value="${redis.port_1}"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${redis.host_2}"/>
                    <constructor-arg name="port" value="${redis.port_2}"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${redis.host_3}"/>
                    <constructor-arg name="port" value="${redis.port_3}"/>
                </bean>
            </set>
        </constructor-arg>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <bean name="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
    </bean>
    <!-- redis -->

    <!-- quartz -->
    <bean name="quartzManager"
          class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.kmzyc.express.quartz.QuartzManager"/>
    </bean>
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="quartzManager"/>
        <property name="startDelay" value="30000"/>
        <property name="repeatInterval" value="1440000"/>
    </bean>
    <bean name="scheduler" lazy-init="false" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
            </list>
        </property>
        <property name="schedulerContextAsMap">
            <map>
                <!-- 定时任务注解的类 -->
                <description>schedulerContextAsMap</description>
                <entry key="quartzInfoService" value-ref="quartzInfoService"/>
                <entry key="expressSubscriptionService" value-ref="expressSubscriptionService"/>
            </map>
        </property>
    </bean>
    <!-- quartz -->
</beans>
