package com.pltfm.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.pltfm.app.dao.BaseDAO;
import com.pltfm.app.dao.OrderAlterDAO;
import com.pltfm.app.entities.OrderAlter;
import com.pltfm.app.entities.OrderAlterExample;
import com.pltfm.app.vobject.OrderAlterVo;

@SuppressWarnings("unchecked")
@Repository("orderAlterDAO")
public class OrderAlterDAOImpl extends BaseDAO implements OrderAlterDAO {
    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Thu Aug 22 10:23:31 CST 2013
     */
    // private SqlMapClient sqlMapClient;
    //
    // /**
    // * This method was generated by Apache iBATIS ibator.
    // * This method corresponds to the database table KMORDER.ORDER_ALTER
    // *
    // * @ibatorgenerated Thu Aug 22 10:23:31 CST 2013
    // */
    // public OrderAlterDAOImpl(SqlMapClient sqlMapClient) {
    // super();
    // this.sqlMapClient = sqlMapClient;
    // }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int countByExample(OrderAlterExample example) throws SQLException {
        Integer count = (Integer) sqlMapClient
                .queryForObject("KMORDER_ORDER_ALTER.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int deleteByExample(OrderAlterExample example) throws SQLException {
        int rows =
                sqlMapClient.delete("KMORDER_ORDER_ALTER.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int deleteByPrimaryKey(Long orderAlterId) throws SQLException {
        OrderAlter key = new OrderAlter();
        key.setOrderAlterId(orderAlterId);
        int rows =
                sqlMapClient.delete("KMORDER_ORDER_ALTER.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public Long insert(OrderAlter record) throws SQLException {
        Object newKey = sqlMapClient.insert("KMORDER_ORDER_ALTER.ibatorgenerated_insert", record);
        return (Long) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public Long insertSelective(OrderAlter record) throws SQLException {
        Object newKey =
                sqlMapClient.insert("KMORDER_ORDER_ALTER.ibatorgenerated_insertSelective", record);
        return (Long) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public List selectByExample(OrderAlterExample example) throws SQLException {
        List list = sqlMapClient.queryForList("KMORDER_ORDER_ALTER.ibatorgenerated_selectByExample",
                example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public OrderAlter selectByPrimaryKey(Long orderAlterId) throws SQLException {
        OrderAlter key = new OrderAlter();
        key.setOrderAlterId(orderAlterId);
        OrderAlter record = (OrderAlter) sqlMapClient
                .queryForObject("KMORDER_ORDER_ALTER.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int updateByExampleSelective(OrderAlter record, OrderAlterExample example)
            throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient
                .update("KMORDER_ORDER_ALTER.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int updateByExample(OrderAlter record, OrderAlterExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows =
                sqlMapClient.update("KMORDER_ORDER_ALTER.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(OrderAlter record) throws SQLException {
        if(null == record.getOrderAlterId()){
            throw new SQLException("退换货编号"+record.getOrderAlterCode()+"中oa.getOrderAlterId为空，拒绝通过OrderAlterId更新updateOrderAlter(oa)"); 
        }
        int rows = sqlMapClient
                .update("KMORDER_ORDER_ALTER.ibatorgenerated_updateByPrimaryKeySelective", record);
        if(rows > 1){
            throw new SQLException("退换货编号"+record.getOrderAlterCode()+"根据主键"+record.getOrderAlterId()+"更新退换货表条数大于1，rows="+rows); 
        }
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    @Override
    public int updateByPrimaryKey(OrderAlter record) throws SQLException {
        if(null == record.getOrderAlterId()){
            throw new SQLException("退换货编号"+record.getOrderAlterCode()+"中oa.getOrderAlterId为空，拒绝通过OrderAlterId更新updateOrderAlter(oa)"); 
        }
        int rows = sqlMapClient.update("KMORDER_ORDER_ALTER.ibatorgenerated_updateByPrimaryKey",
                record);
        if(rows > 1){
            throw new SQLException("退换货编号"+record.getOrderAlterCode()+"根据主键"+record.getOrderAlterId()+"更新退换货表条数大于1，rows="+rows); 
        }
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table KMORDER.ORDER_ALTER
     * 
     * @ibatorgenerated Fri Nov 29 13:38:32 CST 2013
     */
    private static class UpdateByExampleParms extends OrderAlterExample {
        private static final long serialVersionUID = 1L;
        private Object record;

        public UpdateByExampleParms(Object record, OrderAlterExample example) {
            super(example);
            this.record = record;
        }

        @SuppressWarnings("unused")
        public Object getRecord() {
            return record;
        }
    }

    @Override
    public List selectByMap(Map<String, Object> map) throws SQLException {
        return sqlMapClient.queryForList("KMORDER_ORDER_ALTER.selectByMap", map);
    }

    @Override
    public Integer countByMap(Map<String, Object> map) throws SQLException {
        return (Integer) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.countByMap", map);
    }

    @Override
    public Boolean checkIsReturning(Long orderItemId) throws SQLException {
        Long count = (Long) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.checkIsReturning",
                orderItemId);
        return count.longValue() < 1L ? Boolean.FALSE : Boolean.TRUE;
    }

    @Override
    public OrderAlter selectByAlterCode(String orderAlterCode) throws SQLException {
        return (OrderAlter) sqlMapClient.queryForObject(
                "KMORDER_ORDER_ALTER.ibatorgenerated_selectByAlterCode", orderAlterCode);
    }

    @Override
    public void autoSure(Integer orderAutoSureTime) throws SQLException {
        sqlMapClient.update("KMORDER_ORDER_ALTER.autoSure", orderAutoSureTime);
    }

    @Override
    public void autoCancel(Integer orderAutoSureTime) throws SQLException {
        sqlMapClient.update("KMORDER_ORDER_ALTER.autoCancel", orderAutoSureTime);
    }

    @Override
    public List<OrderAlterVo> selectHistory(String orderCode) throws SQLException {
        return sqlMapClient.queryForList("KMORDER_ORDER_ALTER.selectHistory",
                orderCode);
    }

    @Override
    public Integer selectFareAdditional(String orderAlterCode) throws SQLException {
        return (Integer) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.selectFareAdditional",
                orderAlterCode);
    }

    @Override
    public BigDecimal getReturnMoneySum(Map map) throws SQLException {
        return (BigDecimal) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.getReturnMoneySum",
                map);
    }

    @Override
    public List selectOrderReturnByMap(Map<String, Object> map) throws SQLException {
        return sqlMapClient.queryForList("KMORDER_ORDER_ALTER.selectOrderReturnByMap", map);
    }

    @Override
    public List<Map<String, Object>> querySellerAlterOrderExportData(Map<String, Object> params)
            throws SQLException {
        return sqlMapClient.queryForList("KMORDER_ORDER_ALTER.SQL_QUERY_ORDER_ALTER_EXPORT_INFO",
                params);
    }

    @Override
    public BigDecimal selectReturnFare(String orderCode) throws SQLException {
        if (null == orderCode || "".equals(orderCode)) {
            throw new SQLException("订单编号为空！");
        }
        return (BigDecimal) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.getReturnFareSum",
                orderCode);
    }

    @Override
    public List<OrderAlter> queryAlterOrderInfoSync2Base(List<String> lstAlterCode)
            throws SQLException {
        return sqlMapClient.queryForList("KMORDER_ORDER_ALTER.queryOrderAlterInfoSync2Base",
                lstAlterCode);
    }

    @Override
    public Boolean checkDate(Map<String, Object> map) throws SQLException {
        int i = (Integer) sqlMapClient.queryForObject("KMORDER_ORDER_ALTER.checkDate", map);
        return i > 0;
    }

}
