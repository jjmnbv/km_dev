package com.pltfm.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.pltfm.app.dao.BaseDAO;
import com.pltfm.app.dao.OrderAlterOperateStatementDAO;
import com.pltfm.app.entities.OrderAlterOperateStatement;
import com.pltfm.app.entities.OrderAlterOperateStatementExample;
import com.pltfm.app.vobject.Address;

@Repository("orderAlterOperateStatementDAO")
@SuppressWarnings( {"unchecked", "unused"})
public class OrderAlterOperateStatementDAOImpl extends BaseDAO
    implements
      OrderAlterOperateStatementDAO {

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int countByExample(OrderAlterOperateStatementExample example) throws SQLException {
    Integer count =
        (Integer) sqlMapClient.queryForObject(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_countByExample", example);
    return count.intValue();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int deleteByExample(OrderAlterOperateStatementExample example) throws SQLException {
    int rows =
        sqlMapClient.delete(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_deleteByExample", example);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int deleteByPrimaryKey(Long statementId) throws SQLException {
    OrderAlterOperateStatement key = new OrderAlterOperateStatement();
    key.setStatementId(statementId);
    int rows =
        sqlMapClient.delete(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_deleteByPrimaryKey", key);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public Long insert(OrderAlterOperateStatement record) throws SQLException {
    Object newKey =
        sqlMapClient.insert("KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_insert", record);
    return (Long) newKey;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public Long insertSelective(OrderAlterOperateStatement record) throws SQLException {
    Object newKey =
        sqlMapClient.insert(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_insertSelective", record);
    return (Long) newKey;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public List selectByExample(OrderAlterOperateStatementExample example) throws SQLException {
    List list =
        sqlMapClient.queryForList(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_selectByExample", example);
    return list;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public OrderAlterOperateStatement selectByPrimaryKey(Long statementId) throws SQLException {
    OrderAlterOperateStatement key = new OrderAlterOperateStatement();
    key.setStatementId(statementId);
    OrderAlterOperateStatement record =
        (OrderAlterOperateStatement) sqlMapClient.queryForObject(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_selectByPrimaryKey", key);
    return record;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int updateByExampleSelective(OrderAlterOperateStatement record,
      OrderAlterOperateStatementExample example) throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows =
        sqlMapClient
            .update(
                "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_updateByExampleSelective",
                parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int updateByExample(OrderAlterOperateStatement record,
      OrderAlterOperateStatementExample example) throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows =
        sqlMapClient.update(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_updateByExample", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int updateByPrimaryKeySelective(OrderAlterOperateStatement record) throws SQLException {
    int rows =
        sqlMapClient.update(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_updateByPrimaryKeySelective",
            record);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  public int updateByPrimaryKey(OrderAlterOperateStatement record) throws SQLException {
    int rows =
        sqlMapClient.update(
            "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_updateByPrimaryKey", record);
    return rows;
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * KMORDER.ORDER_ALTER_OPERATE_STATEMENT
   * 
   * @ibatorgenerated Thu Sep 05 18:38:07 CST 2013
   */
  private static class UpdateByExampleParms extends OrderAlterOperateStatementExample {
    private static final long serialVersionUID = 1L;
    private Object record;

    public UpdateByExampleParms(Object record, OrderAlterOperateStatementExample example) {
      super(example);
      this.record = record;
    }

    public Object getRecord() {
      return record;
    }
  }

  @Override
  public OrderAlterOperateStatement selectNewest(String orderCode) throws SQLException {
    return (OrderAlterOperateStatement) sqlMapClient.queryForObject(
        "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.selectNewest", orderCode);
  }

  public void updateList(List<OrderAlterOperateStatement> records) throws SQLException {
    super.batchUpdateData(
        "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_updateByPrimaryKeySelective",
        records);
  }

  public void deleteList(List<OrderAlterOperateStatement> records) throws SQLException {
    super.batchUpdateData(
        "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_deleteByPrimaryKey", records);
  }

  public void insertList(List<OrderAlterOperateStatement> records) throws SQLException {
    super.batchUpdateData("KMORDER_ORDER_ALTER_OPERATE_STATEMENT.ibatorgenerated_insert", records);
  }

  @Override
  public Address selectAddressById(BigDecimal addressId) throws SQLException {
    return (Address) sqlMapClient.queryForObject(
        "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.selectAddressById", addressId);
  }

  /**
   * 查询指定状态的订单退款流水
   * 
   * @param orderCodes
   * @return
   * @throws SQLException
   */
  public List<OrderAlterOperateStatement> queryStateMentForRefund(List<String> orderCodes,
      Integer status) throws SQLException {
    Map<String, Object> params = new HashMap<String, Object>();
    params.put("orderCodes", orderCodes);
    params.put("status", status);
    return sqlMapClient.queryForList(
        "KMORDER_ORDER_ALTER_OPERATE_STATEMENT.SQL_QUERY_STATEMENT_FOR_REFUND", params);
  }

  /**
   * 查询待确认的退换货编号
   * 
   * @return
   * @throws SQLException
   */
  public List<String> queryUnconfirmOrderAlterCode() throws SQLException {
    return sqlMapClient
        .queryForList("KMORDER_ORDER_ALTER_OPERATE_STATEMENT.SQL_QUERY_UN_CONFIRM_RECEIPT_ORDER_ALTER_CODE");
  }
}
