package com.pltfm.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.pltfm.app.dao.BaseDAO;
import com.pltfm.app.dao.SellerSettlementDAO;
import com.pltfm.app.entities.SellerSettlement;
import com.pltfm.app.entities.SellerSettlementCriteria;
import com.pltfm.app.entities.SellerSettlementExample;

@SuppressWarnings("unchecked")
@Repository("sellerSettlementDAO")
public class SellerSettlementDAOImpl extends BaseDAO implements SellerSettlementDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int countByExample(SellerSettlementExample example) throws SQLException {
        Integer count =
                (Integer) sqlMapClient.queryForObject(
                        "SELLER_SETTLEMENT.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int deleteByExample(SellerSettlementExample example) throws SQLException {
        int rows =
                sqlMapClient.delete("SELLER_SETTLEMENT.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int deleteByPrimaryKey(Long settlementId) throws SQLException {
        SellerSettlement key = new SellerSettlement();
        key.setSettlementId(settlementId);
        int rows = sqlMapClient.delete("SELLER_SETTLEMENT.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public Long insert(SellerSettlement record) throws SQLException {
        Object newKey = sqlMapClient.insert("SELLER_SETTLEMENT.ibatorgenerated_insert", record);
        return (Long) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public Long insertSelective(SellerSettlement record) throws SQLException {
        Object newKey =
                sqlMapClient.insert("SELLER_SETTLEMENT.ibatorgenerated_insertSelective", record);
        return (Long) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public List selectByExample(SellerSettlementExample example) throws SQLException {
        List list =
                sqlMapClient.queryForList("SELLER_SETTLEMENT.ibatorgenerated_selectByExample",
                        example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public SellerSettlement selectByPrimaryKey(Long settlementId) throws SQLException {
        SellerSettlement key = new SellerSettlement();
        key.setSettlementId(settlementId);
        SellerSettlement record =
                (SellerSettlement) sqlMapClient.queryForObject(
                        "SELLER_SETTLEMENT.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int updateByExampleSelective(SellerSettlement record, SellerSettlementExample example)
            throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows =
                sqlMapClient.update("SELLER_SETTLEMENT.ibatorgenerated_updateByExampleSelective",
                        parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int updateByExample(SellerSettlement record, SellerSettlementExample example)
            throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("SELLER_SETTLEMENT.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int updateByPrimaryKeySelective(SellerSettlement record) throws SQLException {
        int rows =
                sqlMapClient.update(
                        "SELLER_SETTLEMENT.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    public int updateByPrimaryKey(SellerSettlement record) throws SQLException {
        int rows =
                sqlMapClient.update("SELLER_SETTLEMENT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    @Override
    public int updateOperate(SellerSettlement record) throws SQLException {
        int rows = sqlMapClient.update("SELLER_SETTLEMENT.ibatorgenerated_updateOperate", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    private static class UpdateByExampleParms extends SellerSettlementExample {
        private static final long serialVersionUID = 1L;
        private Object record;

        public UpdateByExampleParms(Object record, SellerSettlementExample example) {
            super(example);
            this.record = record;
        }

        @SuppressWarnings("unused")
        public Object getRecord() {
            return record;
        }
    }

    @Override
    public List<SellerSettlement> querySettlementList(SellerSettlementCriteria criteria)
            throws SQLException {

        return (List<SellerSettlement>) sqlMapClient.queryForList(
                "SELLER_SETTLEMENT.selectSettlementList", criteria);
    }

    @Override
    public int selectSettlementListSize(SellerSettlementCriteria criteria) throws SQLException {

        return (Integer) sqlMapClient.queryForObject("SELLER_SETTLEMENT.selectSettlementListSize",
                criteria);
    }

    @Override
    public SellerSettlement getSettlementByNo(SellerSettlementCriteria criteria)
            throws SQLException {
        return (SellerSettlement) sqlMapClient.queryForObject(
                "SELLER_SETTLEMENT.getSettlementByNo", criteria);
    }

    @Override
    public String getSellerShopName(SellerSettlementCriteria criteria) throws SQLException {
        return (String) sqlMapClient
                .queryForObject("SELLER_SETTLEMENT.getSellerShopName", criteria);
    }

    @Override
    public List selectSettleData(Map map) throws SQLException {
        List list =
                sqlMapClient.queryForList("SELLER_SETTLEMENT.ibatorgenerated_selectByMapForSettle",
                        map);
        return list;
    }

    @Override
    public List selectSettleAlterData(Map map) throws SQLException {
        List list =
                sqlMapClient.queryForList(
                        "SELLER_SETTLEMENT.ibatorgenerated_selectByMapForSettleAlter", map);
        return list;
    }

    @Override
    public Long insertSettleDataDetail(Map map) throws SQLException {
        Long result =
                (Long) sqlMapClient.insert(
                        "SELLER_SETTLEMENT.ibatorgenerated_insertSettleDataDetail", map);

        return result;
    }

    @Override
    public Long insertSettleDataDetailForPresell(Map map) throws SQLException {
        Long result =
                (Long) sqlMapClient.insert(
                        "SELLER_SETTLEMENT.ibatorgenerated_insertSettleDataDetailForPresell", map);
        return result;
    }

    @Override
    public Long insertSettleFareDetail(Map map) throws SQLException {
        Long result =
                (Long) sqlMapClient.insert(
                        "SELLER_SETTLEMENT.ibatorgenerated_insertSettleFareDetail", map);
        return result;
    }

    @Override
    public Long insertSettleRefundDetail(Map map) throws SQLException {
        Long result =
                (Long) sqlMapClient.insert(
                        "SELLER_SETTLEMENT.ibatorgenerated_insertSettleRefundDetail", map);
        return result;
    }

    // @Override
    // public Long insertSettleRefundDetailForPresell(Map map) throws SQLException {
    // Long result =
    // (Long) sqlMapClient.insert(
    // "SELLER_SETTLEMENT.ibatorgenerated_insertSettleRefundDetailForPresell", map);
    // return result;
    // }

    @Override
    public List selectSellersNeedSettle(Map map) throws SQLException {
        List list =
                sqlMapClient.queryForList(
                        "SELLER_SETTLEMENT.ibatorgenerated_selectSellersNeedSettle", map);
        return list;
    }

    @Override
    public List<SellerSettlement> selectSupplierListByName(String supplierName) throws SQLException {
        List<SellerSettlement> list =
                sqlMapClient.queryForList("SELLER_SETTLEMENT.selectSupplierListByName",
                        supplierName);
        return list;
    }

    @Override
    public List<SellerSettlement> selectAllSupplier() throws SQLException {
        List<SellerSettlement> list =
                sqlMapClient.queryForList("SELLER_SETTLEMENT.selectAllSupplier");
        return list;
    }

    @Override
    public List<String> selectSupplierByLikePeriod(String sellerId, String period)
            throws SQLException {

        SellerSettlement info = new SellerSettlement();

        info.setSellerId(sellerId);
        info.setSettlementPeriod(period);

        List<String> list =
                sqlMapClient.queryForList("SELLER_SETTLEMENT.selectSupplierByLikePeriod", info);
        return list;
    }

    @Override
    public int updateFinancialConfirmation(SellerSettlement record) throws SQLException {
        int rows =
                sqlMapClient.update(
                        "SELLER_SETTLEMENT.ibatorgenerated_updateFinancialConfirmation", record);
        return rows;
    }

    @Override
    public int updateSellerConfirmation(SellerSettlement record) throws SQLException {
        int rows =
                sqlMapClient.update("SELLER_SETTLEMENT.ibatorgenerated_updateSellerConfirmation",
                        record);
        return rows;
    }

    @Override
    public int finacialAmountSettle(SellerSettlement record) throws SQLException {
        record.setSettlementFinishTime(new Date());
        int rows = sqlMapClient.update("SELLER_SETTLEMENT.finacialAmountSettle", record);
        return rows;
    }

    @Override
    public BigDecimal selectSumAdjForSettle(Map map) throws SQLException {
        Object obj = sqlMapClient.queryForObject("SELLER_SETTLEMENT.selectSumAdjForSettle", map);
        if (null == obj) return new BigDecimal(0.0);
        BigDecimal diffAdjSum = (BigDecimal) obj;
        return diffAdjSum;
    }

    @Override
    public String selectMobieByLoginId(SellerSettlement record) throws SQLException {
        Object obj = sqlMapClient.queryForObject("SELLER_SETTLEMENT.selectMobileByLoginId", record);
        return (String) obj;
    }

    @Override
    public Long queryLoginIdByCommercialId(String sellerId) throws SQLException {
        Object obj =
                sqlMapClient.queryForObject("SELLER_SETTLEMENT.queryLoginIdByCommercialId",
                        sellerId);
        return (Long) obj;
    }

    @Override
    public Map queryCompensateForPressell(Map map) throws SQLException {
        Object obj =
                sqlMapClient.queryForObject("SELLER_SETTLEMENT.queryCompensateForPressell", map);
        return (Map) obj;
    }

    @Override
    public List<Map<String,Object>> querySettlementListForExport(SellerSettlementCriteria criteria)
                    throws SQLException {
        List<Map<String,Object>> dateList = new ArrayList<Map<String,Object>>();
        dateList =  sqlMapClient.queryForList(
                        "SELLER_SETTLEMENT.selectSettlementListForExport", criteria);
        return dateList;
    }
}
