package com.pltfm.app.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unchecked")
public class OrderAlterPhotoExample implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  protected String orderByClause;
  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  protected List oredCriteria;

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public OrderAlterPhotoExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  protected OrderAlterPhotoExample(OrderAlterPhotoExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * KMORDER.ORDER_ALTER_PHOTO
   * 
   * @ibatorgenerated Fri Sep 27 14:27:36 CST 2013
   */
  public static class Criteria {
    protected List criteriaWithoutValue;
    protected List criteriaWithSingleValue;
    protected List criteriaWithListValue;
    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    public Criteria andPhotoIdIsNull() {
      addCriterion("PHOTO_ID is null");
      return this;
    }

    public Criteria andPhotoIdIsNotNull() {
      addCriterion("PHOTO_ID is not null");
      return this;
    }

    public Criteria andPhotoIdEqualTo(Long value) {
      addCriterion("PHOTO_ID =", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdNotEqualTo(Long value) {
      addCriterion("PHOTO_ID <>", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdGreaterThan(Long value) {
      addCriterion("PHOTO_ID >", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdGreaterThanOrEqualTo(Long value) {
      addCriterion("PHOTO_ID >=", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdLessThan(Long value) {
      addCriterion("PHOTO_ID <", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdLessThanOrEqualTo(Long value) {
      addCriterion("PHOTO_ID <=", value, "photoId");
      return this;
    }

    public Criteria andPhotoIdIn(List values) {
      addCriterion("PHOTO_ID in", values, "photoId");
      return this;
    }

    public Criteria andPhotoIdNotIn(List values) {
      addCriterion("PHOTO_ID not in", values, "photoId");
      return this;
    }

    public Criteria andPhotoIdBetween(Long value1, Long value2) {
      addCriterion("PHOTO_ID between", value1, value2, "photoId");
      return this;
    }

    public Criteria andPhotoIdNotBetween(Long value1, Long value2) {
      addCriterion("PHOTO_ID not between", value1, value2, "photoId");
      return this;
    }

    public Criteria andBatchNoIsNull() {
      addCriterion("BATCH_NO is null");
      return this;
    }

    public Criteria andBatchNoIsNotNull() {
      addCriterion("BATCH_NO is not null");
      return this;
    }

    public Criteria andBatchNoEqualTo(String value) {
      addCriterion("BATCH_NO =", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoNotEqualTo(String value) {
      addCriterion("BATCH_NO <>", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoGreaterThan(String value) {
      addCriterion("BATCH_NO >", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoGreaterThanOrEqualTo(String value) {
      addCriterion("BATCH_NO >=", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoLessThan(String value) {
      addCriterion("BATCH_NO <", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoLessThanOrEqualTo(String value) {
      addCriterion("BATCH_NO <=", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoLike(String value) {
      addCriterion("BATCH_NO like", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoNotLike(String value) {
      addCriterion("BATCH_NO not like", value, "batchNo");
      return this;
    }

    public Criteria andBatchNoIn(List values) {
      addCriterion("BATCH_NO in", values, "batchNo");
      return this;
    }

    public Criteria andBatchNoNotIn(List values) {
      addCriterion("BATCH_NO not in", values, "batchNo");
      return this;
    }

    public Criteria andBatchNoBetween(String value1, String value2) {
      addCriterion("BATCH_NO between", value1, value2, "batchNo");
      return this;
    }

    public Criteria andBatchNoNotBetween(String value1, String value2) {
      addCriterion("BATCH_NO not between", value1, value2, "batchNo");
      return this;
    }

    public Criteria andUrlIsNull() {
      addCriterion("URL is null");
      return this;
    }

    public Criteria andUrlIsNotNull() {
      addCriterion("URL is not null");
      return this;
    }

    public Criteria andUrlEqualTo(String value) {
      addCriterion("URL =", value, "url");
      return this;
    }

    public Criteria andUrlNotEqualTo(String value) {
      addCriterion("URL <>", value, "url");
      return this;
    }

    public Criteria andUrlGreaterThan(String value) {
      addCriterion("URL >", value, "url");
      return this;
    }

    public Criteria andUrlGreaterThanOrEqualTo(String value) {
      addCriterion("URL >=", value, "url");
      return this;
    }

    public Criteria andUrlLessThan(String value) {
      addCriterion("URL <", value, "url");
      return this;
    }

    public Criteria andUrlLessThanOrEqualTo(String value) {
      addCriterion("URL <=", value, "url");
      return this;
    }

    public Criteria andUrlLike(String value) {
      addCriterion("URL like", value, "url");
      return this;
    }

    public Criteria andUrlNotLike(String value) {
      addCriterion("URL not like", value, "url");
      return this;
    }

    public Criteria andUrlIn(List values) {
      addCriterion("URL in", values, "url");
      return this;
    }

    public Criteria andUrlNotIn(List values) {
      addCriterion("URL not in", values, "url");
      return this;
    }

    public Criteria andUrlBetween(String value1, String value2) {
      addCriterion("URL between", value1, value2, "url");
      return this;
    }

    public Criteria andUrlNotBetween(String value1, String value2) {
      addCriterion("URL not between", value1, value2, "url");
      return this;
    }
  }
}
