package com.pltfm.app.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Repository;

import com.pltfm.app.dao.BaseDAO;
import com.pltfm.app.dao.SettlementRefundDAO;
import com.pltfm.app.entities.SettlementRefund;
import com.pltfm.app.entities.SettlementRefundCriteria;
import com.pltfm.app.entities.SettlementRefundExample;

@SuppressWarnings("unchecked")
@Repository("settlementRefundDAO")
public class SettlementRefundDAOImpl extends BaseDAO implements SettlementRefundDAO {

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int countByExample(SettlementRefundExample example) throws SQLException {
    Integer count =
        (Integer) sqlMapClient.queryForObject("SETTLEMENT_REFUND.ibatorgenerated_countByExample",
            example);
    return count.intValue();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int deleteByExample(SettlementRefundExample example) throws SQLException {
    int rows = sqlMapClient.delete("SETTLEMENT_REFUND.ibatorgenerated_deleteByExample", example);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int deleteByPrimaryKey(Long settlementRefundId) throws SQLException {
    SettlementRefund key = new SettlementRefund();
    key.setSettlementRefundId(settlementRefundId);
    int rows = sqlMapClient.delete("SETTLEMENT_REFUND.ibatorgenerated_deleteByPrimaryKey", key);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public Long insert(SettlementRefund record) throws SQLException {
    Object newKey = sqlMapClient.insert("SETTLEMENT_REFUND.ibatorgenerated_insert", record);
    return (Long) newKey;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public Long insertSelective(SettlementRefund record) throws SQLException {
    Object newKey =
        sqlMapClient.insert("SETTLEMENT_REFUND.ibatorgenerated_insertSelective", record);
    return (Long) newKey;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public List selectByExample(SettlementRefundExample example) throws SQLException {
    List list =
        sqlMapClient.queryForList("SETTLEMENT_REFUND.ibatorgenerated_selectByExample", example);
    return list;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public SettlementRefund selectByPrimaryKey(Long settlementRefundId) throws SQLException {
    SettlementRefund key = new SettlementRefund();
    key.setSettlementRefundId(settlementRefundId);
    SettlementRefund record =
        (SettlementRefund) sqlMapClient.queryForObject(
            "SETTLEMENT_REFUND.ibatorgenerated_selectByPrimaryKey", key);
    return record;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int updateByExampleSelective(SettlementRefund record, SettlementRefundExample example)
      throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows =
        sqlMapClient.update("SETTLEMENT_REFUND.ibatorgenerated_updateByExampleSelective", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int updateByExample(SettlementRefund record, SettlementRefundExample example)
      throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows = sqlMapClient.update("SETTLEMENT_REFUND.ibatorgenerated_updateByExample", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int updateByPrimaryKeySelective(SettlementRefund record) throws SQLException {
    int rows =
        sqlMapClient
            .update("SETTLEMENT_REFUND.ibatorgenerated_updateByPrimaryKeySelective", record);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  public int updateByPrimaryKey(SettlementRefund record) throws SQLException {
    int rows = sqlMapClient.update("SETTLEMENT_REFUND.ibatorgenerated_updateByPrimaryKey", record);
    return rows;
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * SETTLEMENT_REFUND
   * 
   * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
   */
  private static class UpdateByExampleParms extends SettlementRefundExample {
    private static final long serialVersionUID = 1L;
    private Object record;

    public UpdateByExampleParms(Object record, SettlementRefundExample example) {
      super(example);
      this.record = record;
    }

    @SuppressWarnings("unused")
    public Object getRecord() {
      return record;
    }
  }

  @Override
  public Map refundSum(SettlementRefundCriteria settlementRefundCriteria) throws SQLException {
    List list =
        sqlMapClient.queryForList("SETTLEMENT_REFUND.selectRefundSum", settlementRefundCriteria);
    return CollectionUtils.isEmpty(list) ? null : (Map) list.get(0);
  }

  @Override
  public List<Map<String, Object>> queryExportRefundInfo(Map<String, String> map)
      throws SQLException {
    List<Map<String, Object>> list =
        sqlMapClient.queryForList("SETTLEMENT_REFUND.queryExportRefundInfo", map);
    return list;
  }
}
