package com.pltfm.app.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unchecked")
public class OrderCarryExample implements Serializable {
  private static final long serialVersionUID = 1L;
  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  protected String orderByClause;

  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  protected List oredCriteria;

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public OrderCarryExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  protected OrderCarryExample(OrderCarryExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * KMORDER.ORDER_CARRY
   * 
   * @ibatorgenerated Mon Jul 29 11:23:58 CST 2013
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    protected void addCriterionForJDBCDate(String condition, Date value, String property) {
      addCriterion(condition, new java.sql.Date(value.getTime()), property);
    }

    protected void addCriterionForJDBCDate(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      List dateList = new ArrayList();
      Iterator iter = values.iterator();
      while (iter.hasNext()) {
        dateList.add(new java.sql.Date(((Date) iter.next()).getTime()));
      }
      addCriterion(condition, dateList, property);
    }

    protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
        String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2
          .getTime()), property);
    }

    public Criteria andHandleIdIsNull() {
      addCriterion("HANDLE_ID is null");
      return this;
    }

    public Criteria andHandleIdIsNotNull() {
      addCriterion("HANDLE_ID is not null");
      return this;
    }

    public Criteria andHandleIdEqualTo(Long value) {
      addCriterion("HANDLE_ID =", value, "handleId");
      return this;
    }

    public Criteria andHandleIdNotEqualTo(Long value) {
      addCriterion("HANDLE_ID <>", value, "handleId");
      return this;
    }

    public Criteria andHandleIdGreaterThan(Long value) {
      addCriterion("HANDLE_ID >", value, "handleId");
      return this;
    }

    public Criteria andHandleIdGreaterThanOrEqualTo(Long value) {
      addCriterion("HANDLE_ID >=", value, "handleId");
      return this;
    }

    public Criteria andHandleIdLessThan(Long value) {
      addCriterion("HANDLE_ID <", value, "handleId");
      return this;
    }

    public Criteria andHandleIdLessThanOrEqualTo(Long value) {
      addCriterion("HANDLE_ID <=", value, "handleId");
      return this;
    }

    public Criteria andHandleIdIn(List values) {
      addCriterion("HANDLE_ID in", values, "handleId");
      return this;
    }

    public Criteria andHandleIdNotIn(List values) {
      addCriterion("HANDLE_ID not in", values, "handleId");
      return this;
    }

    public Criteria andHandleIdBetween(Long value1, Long value2) {
      addCriterion("HANDLE_ID between", value1, value2, "handleId");
      return this;
    }

    public Criteria andHandleIdNotBetween(Long value1, Long value2) {
      addCriterion("HANDLE_ID not between", value1, value2, "handleId");
      return this;
    }

    public Criteria andCreateDateIsNull() {
      addCriterion("CREATE_DATE is null");
      return this;
    }

    public Criteria andCreateDateIsNotNull() {
      addCriterion("CREATE_DATE is not null");
      return this;
    }

    public Criteria andCreateDateEqualTo(Date value) {
      addCriterionForJDBCDate("CREATE_DATE =", value, "createDate");
      return this;
    }

    public Criteria andCreateDateNotEqualTo(Date value) {
      addCriterionForJDBCDate("CREATE_DATE <>", value, "createDate");
      return this;
    }

    public Criteria andCreateDateGreaterThan(Date value) {
      addCriterionForJDBCDate("CREATE_DATE >", value, "createDate");
      return this;
    }

    public Criteria andCreateDateGreaterThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("CREATE_DATE >=", value, "createDate");
      return this;
    }

    public Criteria andCreateDateLessThan(Date value) {
      addCriterionForJDBCDate("CREATE_DATE <", value, "createDate");
      return this;
    }

    public Criteria andCreateDateLessThanOrEqualTo(Date value) {
      addCriterionForJDBCDate("CREATE_DATE <=", value, "createDate");
      return this;
    }

    public Criteria andCreateDateIn(List values) {
      addCriterionForJDBCDate("CREATE_DATE in", values, "createDate");
      return this;
    }

    public Criteria andCreateDateNotIn(List values) {
      addCriterionForJDBCDate("CREATE_DATE not in", values, "createDate");
      return this;
    }

    public Criteria andCreateDateBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("CREATE_DATE between", value1, value2, "createDate");
      return this;
    }

    public Criteria andCreateDateNotBetween(Date value1, Date value2) {
      addCriterionForJDBCDate("CREATE_DATE not between", value1, value2, "createDate");
      return this;
    }

    public Criteria andOperatorIsNull() {
      addCriterion("OPERATOR is null");
      return this;
    }

    public Criteria andOperatorIsNotNull() {
      addCriterion("OPERATOR is not null");
      return this;
    }

    public Criteria andOperatorEqualTo(String value) {
      addCriterion("OPERATOR =", value, "operator");
      return this;
    }

    public Criteria andOperatorNotEqualTo(String value) {
      addCriterion("OPERATOR <>", value, "operator");
      return this;
    }

    public Criteria andOperatorGreaterThan(String value) {
      addCriterion("OPERATOR >", value, "operator");
      return this;
    }

    public Criteria andOperatorGreaterThanOrEqualTo(String value) {
      addCriterion("OPERATOR >=", value, "operator");
      return this;
    }

    public Criteria andOperatorLessThan(String value) {
      addCriterion("OPERATOR <", value, "operator");
      return this;
    }

    public Criteria andOperatorLessThanOrEqualTo(String value) {
      addCriterion("OPERATOR <=", value, "operator");
      return this;
    }

    public Criteria andOperatorLike(String value) {
      addCriterion("OPERATOR like", value, "operator");
      return this;
    }

    public Criteria andOperatorNotLike(String value) {
      addCriterion("OPERATOR not like", value, "operator");
      return this;
    }

    public Criteria andOperatorIn(List values) {
      addCriterion("OPERATOR in", values, "operator");
      return this;
    }

    public Criteria andOperatorNotIn(List values) {
      addCriterion("OPERATOR not in", values, "operator");
      return this;
    }

    public Criteria andOperatorBetween(String value1, String value2) {
      addCriterion("OPERATOR between", value1, value2, "operator");
      return this;
    }

    public Criteria andOperatorNotBetween(String value1, String value2) {
      addCriterion("OPERATOR not between", value1, value2, "operator");
      return this;
    }

    public Criteria andOrderSumIsNull() {
      addCriterion("ORDER_SUM is null");
      return this;
    }

    public Criteria andOrderSumIsNotNull() {
      addCriterion("ORDER_SUM is not null");
      return this;
    }

    public Criteria andOrderSumEqualTo(Long value) {
      addCriterion("ORDER_SUM =", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumNotEqualTo(Long value) {
      addCriterion("ORDER_SUM <>", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumGreaterThan(Long value) {
      addCriterion("ORDER_SUM >", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumGreaterThanOrEqualTo(Long value) {
      addCriterion("ORDER_SUM >=", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumLessThan(Long value) {
      addCriterion("ORDER_SUM <", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumLessThanOrEqualTo(Long value) {
      addCriterion("ORDER_SUM <=", value, "orderSum");
      return this;
    }

    public Criteria andOrderSumIn(List values) {
      addCriterion("ORDER_SUM in", values, "orderSum");
      return this;
    }

    public Criteria andOrderSumNotIn(List values) {
      addCriterion("ORDER_SUM not in", values, "orderSum");
      return this;
    }

    public Criteria andOrderSumBetween(Long value1, Long value2) {
      addCriterion("ORDER_SUM between", value1, value2, "orderSum");
      return this;
    }

    public Criteria andOrderSumNotBetween(Long value1, Long value2) {
      addCriterion("ORDER_SUM not between", value1, value2, "orderSum");
      return this;
    }

    public Criteria andNoOrderSumIsNull() {
      addCriterion("NO_ORDER_SUM is null");
      return this;
    }

    public Criteria andNoOrderSumIsNotNull() {
      addCriterion("NO_ORDER_SUM is not null");
      return this;
    }

    public Criteria andNoOrderSumEqualTo(Long value) {
      addCriterion("NO_ORDER_SUM =", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumNotEqualTo(Long value) {
      addCriterion("NO_ORDER_SUM <>", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumGreaterThan(Long value) {
      addCriterion("NO_ORDER_SUM >", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumGreaterThanOrEqualTo(Long value) {
      addCriterion("NO_ORDER_SUM >=", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumLessThan(Long value) {
      addCriterion("NO_ORDER_SUM <", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumLessThanOrEqualTo(Long value) {
      addCriterion("NO_ORDER_SUM <=", value, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumIn(List values) {
      addCriterion("NO_ORDER_SUM in", values, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumNotIn(List values) {
      addCriterion("NO_ORDER_SUM not in", values, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumBetween(Long value1, Long value2) {
      addCriterion("NO_ORDER_SUM between", value1, value2, "noOrderSum");
      return this;
    }

    public Criteria andNoOrderSumNotBetween(Long value1, Long value2) {
      addCriterion("NO_ORDER_SUM not between", value1, value2, "noOrderSum");
      return this;
    }

    public Criteria andExcelAddressIsNull() {
      addCriterion("EXCEL_ADDRESS is null");
      return this;
    }

    public Criteria andExcelAddressIsNotNull() {
      addCriterion("EXCEL_ADDRESS is not null");
      return this;
    }

    public Criteria andExcelAddressEqualTo(String value) {
      addCriterion("EXCEL_ADDRESS =", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressNotEqualTo(String value) {
      addCriterion("EXCEL_ADDRESS <>", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressGreaterThan(String value) {
      addCriterion("EXCEL_ADDRESS >", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressGreaterThanOrEqualTo(String value) {
      addCriterion("EXCEL_ADDRESS >=", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressLessThan(String value) {
      addCriterion("EXCEL_ADDRESS <", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressLessThanOrEqualTo(String value) {
      addCriterion("EXCEL_ADDRESS <=", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressLike(String value) {
      addCriterion("EXCEL_ADDRESS like", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressNotLike(String value) {
      addCriterion("EXCEL_ADDRESS not like", value, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressIn(List values) {
      addCriterion("EXCEL_ADDRESS in", values, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressNotIn(List values) {
      addCriterion("EXCEL_ADDRESS not in", values, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressBetween(String value1, String value2) {
      addCriterion("EXCEL_ADDRESS between", value1, value2, "excelAddress");
      return this;
    }

    public Criteria andExcelAddressNotBetween(String value1, String value2) {
      addCriterion("EXCEL_ADDRESS not between", value1, value2, "excelAddress");
      return this;
    }
  }
}
