package com.pltfm.app.dao.impl;

import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.util.CollectionUtils;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.pltfm.app.dao.UserChannelDAO;
import com.pltfm.app.vobject.UserChannel;
import com.pltfm.app.vobject.UserChannelExample;

/**
 * 
 * @author tanyunxing
 * 
 */
// @Repository("userChannelDao")
@SuppressWarnings("unchecked")
public class UserChannelDAOImpl implements UserChannelDAO {
  private Logger log = Logger.getLogger(UserChannelDAOImpl.class);
  private SqlMapClient sqlMapClient;

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public UserChannelDAOImpl(SqlMapClient sqlMapClient) {
    super();
    this.sqlMapClient = sqlMapClient;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int countByExample(UserChannelExample example) throws SQLException {
    Integer count =
        (Integer) sqlMapClient.queryForObject("USER_CHANNEL.ibatorgenerated_countByExample",
            example);
    return count.intValue();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int deleteByExample(UserChannelExample example) throws SQLException {
    int rows = sqlMapClient.delete("USER_CHANNEL.ibatorgenerated_deleteByExample", example);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int deleteByPrimaryKey(Long ids) throws SQLException {
    UserChannel key = new UserChannel();
    key.setIds(ids);
    int rows = sqlMapClient.delete("USER_CHANNEL.ibatorgenerated_deleteByPrimaryKey", key);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public void insert(UserChannel record) throws SQLException {
    sqlMapClient.insert("USER_CHANNEL.ibatorgenerated_insert", record);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public void insertSelective(UserChannel record) throws SQLException {
    sqlMapClient.insert("USER_CHANNEL.ibatorgenerated_insertSelective", record);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public List selectByExample(UserChannelExample example) throws SQLException {
    List list = sqlMapClient.queryForList("USER_CHANNEL.ibatorgenerated_selectByExample", example);
    return list;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public UserChannel selectByPrimaryKey(Long ids) throws SQLException {
    UserChannel key = new UserChannel();
    key.setIds(ids);
    UserChannel record =
        (UserChannel) sqlMapClient.queryForObject(
            "USER_CHANNEL.ibatorgenerated_selectByPrimaryKey", key);
    return record;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int updateByExampleSelective(UserChannel record, UserChannelExample example)
      throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows = sqlMapClient.update("USER_CHANNEL.ibatorgenerated_updateByExampleSelective", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int updateByExample(UserChannel record, UserChannelExample example) throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows = sqlMapClient.update("USER_CHANNEL.ibatorgenerated_updateByExample", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int updateByPrimaryKeySelective(UserChannel record) throws SQLException {
    int rows =
        sqlMapClient.update("USER_CHANNEL.ibatorgenerated_updateByPrimaryKeySelective", record);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  public int updateByPrimaryKey(UserChannel record) throws SQLException {
    int rows = sqlMapClient.update("USER_CHANNEL.ibatorgenerated_updateByPrimaryKey", record);
    return rows;
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * USER_CHANNEL
   * 
   * @ibatorgenerated Wed Nov 20 14:16:41 CST 2013
   */
  private static class UpdateByExampleParms extends UserChannelExample {
    private Object record;

    public UpdateByExampleParms(Object record, UserChannelExample example) {
      super(example);
      this.record = record;
    }

    @SuppressWarnings("unused")
    public Object getRecord() {
      return record;
    }
  }

  @Override
  public int saveBatch(List<UserChannel> list) throws SQLException {
    return batchInsertDataNt(list, "USER_CHANNEL.ibatorgenerated_insert");
  }

  @Override
  public int deleteBatch(List<UserChannelExample> exams) throws SQLException {
    return batchDeleteByDataNt(exams, "USER_CHANNEL.ibatorgenerated_deleteByExample");
  }

  /**
   * 批量保存（一次,自身无事务）
   * 
   * @param dataList
   */
  private int batchInsertDataNt(final List<UserChannel> dataList, final String statement) {
    try {
      if (!CollectionUtils.isEmpty(dataList)) {
        sqlMapClient.startBatch();
        for (int i = 0; i < dataList.size(); i++) {
          sqlMapClient.insert(statement, dataList.get(i));
        }
        sqlMapClient.executeBatch();
        return 1;
      }
    } catch (Exception e) {
      log.error("批量保存异常！", e);
      return 0;
    }
    return 0;
  }

  /**
   * 根据主键批量删除（一次,自身无事务,集合不为泛型）
   * 
   * @param dataList
   */
  public int batchDeleteByDataNt(final List dataList, final String statement) {
    try {
      if (!CollectionUtils.isEmpty(dataList)) {
        sqlMapClient.startBatch();
        for (int i = 0; i < dataList.size(); i++) {
          sqlMapClient.delete(statement, dataList.get(i));
        }
        sqlMapClient.executeBatch();
        return 1;
      }
    } catch (Exception e) {
      log.error("根据主键批量删除异常！", e);
      return 0;
    }
    return 0;
  }
}
