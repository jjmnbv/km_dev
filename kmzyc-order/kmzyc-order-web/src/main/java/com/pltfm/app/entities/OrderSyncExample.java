package com.pltfm.app.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unchecked")
public class OrderSyncExample implements Serializable {

  private static final long serialVersionUID = 1L;
  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  protected String orderByClause;

  /**
   * This field was generated by Abator for iBATIS. This field corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  protected List oredCriteria;

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public OrderSyncExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  protected OrderSyncExample(OrderSyncExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS. This method corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Abator for iBATIS. This class corresponds to the database table
   * KMORDER.ORDER_SYNC
   * 
   * @abatorgenerated Mon Feb 09 10:01:08 CST 2015
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
          || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    public Criteria andSyncIdIsNull() {
      addCriterion("SYNC_ID is null");
      return this;
    }

    public Criteria andSyncIdIsNotNull() {
      addCriterion("SYNC_ID is not null");
      return this;
    }

    public Criteria andSyncIdEqualTo(Long value) {
      addCriterion("SYNC_ID =", value, "syncId");
      return this;
    }

    public Criteria andSyncIdNotEqualTo(Long value) {
      addCriterion("SYNC_ID <>", value, "syncId");
      return this;
    }

    public Criteria andSyncIdGreaterThan(Long value) {
      addCriterion("SYNC_ID >", value, "syncId");
      return this;
    }

    public Criteria andSyncIdGreaterThanOrEqualTo(Long value) {
      addCriterion("SYNC_ID >=", value, "syncId");
      return this;
    }

    public Criteria andSyncIdLessThan(Long value) {
      addCriterion("SYNC_ID <", value, "syncId");
      return this;
    }

    public Criteria andSyncIdLessThanOrEqualTo(Long value) {
      addCriterion("SYNC_ID <=", value, "syncId");
      return this;
    }

    public Criteria andSyncIdIn(List values) {
      addCriterion("SYNC_ID in", values, "syncId");
      return this;
    }

    public Criteria andSyncIdNotIn(List values) {
      addCriterion("SYNC_ID not in", values, "syncId");
      return this;
    }

    public Criteria andSyncIdBetween(Long value1, Long value2) {
      addCriterion("SYNC_ID between", value1, value2, "syncId");
      return this;
    }

    public Criteria andSyncIdNotBetween(Long value1, Long value2) {
      addCriterion("SYNC_ID not between", value1, value2, "syncId");
      return this;
    }

    public Criteria andOrderCodeIsNull() {
      addCriterion("ORDER_CODE is null");
      return this;
    }

    public Criteria andOrderCodeIsNotNull() {
      addCriterion("ORDER_CODE is not null");
      return this;
    }

    public Criteria andOrderCodeEqualTo(String value) {
      addCriterion("ORDER_CODE =", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeNotEqualTo(String value) {
      addCriterion("ORDER_CODE <>", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeGreaterThan(String value) {
      addCriterion("ORDER_CODE >", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeGreaterThanOrEqualTo(String value) {
      addCriterion("ORDER_CODE >=", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeLessThan(String value) {
      addCriterion("ORDER_CODE <", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeLessThanOrEqualTo(String value) {
      addCriterion("ORDER_CODE <=", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeLike(String value) {
      addCriterion("ORDER_CODE like", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeNotLike(String value) {
      addCriterion("ORDER_CODE not like", value, "orderCode");
      return this;
    }

    public Criteria andOrderCodeIn(List values) {
      addCriterion("ORDER_CODE in", values, "orderCode");
      return this;
    }

    public Criteria andOrderCodeNotIn(List values) {
      addCriterion("ORDER_CODE not in", values, "orderCode");
      return this;
    }

    public Criteria andOrderCodeBetween(String value1, String value2) {
      addCriterion("ORDER_CODE between", value1, value2, "orderCode");
      return this;
    }

    public Criteria andOrderCodeNotBetween(String value1, String value2) {
      addCriterion("ORDER_CODE not between", value1, value2, "orderCode");
      return this;
    }

    public Criteria andSyncFlagIsNull() {
      addCriterion("SYNC_FLAG is null");
      return this;
    }

    public Criteria andSyncFlagIsNotNull() {
      addCriterion("SYNC_FLAG is not null");
      return this;
    }

    public Criteria andSyncFlagEqualTo(Short value) {
      addCriterion("SYNC_FLAG =", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagNotEqualTo(Short value) {
      addCriterion("SYNC_FLAG <>", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagGreaterThan(Short value) {
      addCriterion("SYNC_FLAG >", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagGreaterThanOrEqualTo(Short value) {
      addCriterion("SYNC_FLAG >=", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagLessThan(Short value) {
      addCriterion("SYNC_FLAG <", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagLessThanOrEqualTo(Short value) {
      addCriterion("SYNC_FLAG <=", value, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagIn(List values) {
      addCriterion("SYNC_FLAG in", values, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagNotIn(List values) {
      addCriterion("SYNC_FLAG not in", values, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagBetween(Short value1, Short value2) {
      addCriterion("SYNC_FLAG between", value1, value2, "syncFlag");
      return this;
    }

    public Criteria andSyncFlagNotBetween(Short value1, Short value2) {
      addCriterion("SYNC_FLAG not between", value1, value2, "syncFlag");
      return this;
    }
  }
}
