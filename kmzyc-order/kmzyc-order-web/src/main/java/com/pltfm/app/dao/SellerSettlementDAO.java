package com.pltfm.app.dao;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import com.kmzyc.commons.exception.ServiceException;
import com.pltfm.app.entities.SellerSettlement;
import com.pltfm.app.entities.SellerSettlementCriteria;
import com.pltfm.app.entities.SellerSettlementExample;

@SuppressWarnings("unchecked")
public interface SellerSettlementDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int countByExample(SellerSettlementExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int deleteByExample(SellerSettlementExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int deleteByPrimaryKey(Long settlementId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    Long insert(SellerSettlement record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    Long insertSelective(SellerSettlement record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    List selectByExample(SellerSettlementExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    SellerSettlement selectByPrimaryKey(Long settlementId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int updateByExampleSelective(SellerSettlement record, SellerSettlementExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int updateByExample(SellerSettlement record, SellerSettlementExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int updateByPrimaryKeySelective(SellerSettlement record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SELLER_SETTLEMENT
     * 
     * @ibatorgenerated Wed Apr 15 10:27:20 CST 2015
     */
    int updateByPrimaryKey(SellerSettlement record) throws SQLException;

    int updateOperate(SellerSettlement record) throws SQLException;

    /**
     * 查询结算单列表
     * 
     * @param criteria
     * @return
     * @throws SQLException
     */
    List<SellerSettlement> querySettlementList(SellerSettlementCriteria criteria)
            throws SQLException;

    /**
     * 查询结算单列表 SIZE
     * 
     * @param criteria
     * @return
     * @throws SQLException
     */
    int selectSettlementListSize(SellerSettlementCriteria criteria) throws SQLException;

    /**
     * 查询结算单 详情
     * 
     * @param criteria
     * @return
     * @throws SQLException
     */
    SellerSettlement getSettlementByNo(SellerSettlementCriteria criteria) throws SQLException;

    /**
     * 查询店铺名称
     * 
     * @param criteria
     * @return
     * @throws SQLException
     */
    String getSellerShopName(SellerSettlementCriteria criteria) throws SQLException;

    /**
     * 获取妥投汇总数据
     * 
     * @param example
     * @return
     * @throws SQLException
     */
    public List selectSettleData(Map map) throws SQLException;

    /**
     * 获取退款汇总数据
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public List selectSettleAlterData(Map map) throws SQLException;

    /**
     * 插入订单明细表数据（妥投、退款）
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public Long insertSettleDataDetail(Map map) throws SQLException;

    /**
     * 插入订单明细表数据（预售超时未支付尾款）
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public Long insertSettleDataDetailForPresell(Map map) throws SQLException;

    /**
     * 插入妥投订单运费明细
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public Long insertSettleFareDetail(Map map) throws SQLException;

    /**
     * 插入退款商品明细表所需数据
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public Long insertSettleRefundDetail(Map map) throws SQLException;

    // /**
    // * 插入退款商品明细表所需数据,预售超时未发货赔付
    // *
    // * @param map
    // * @return
    // * @throws SQLException
    // */
    // public Long insertSettleRefundDetailForPresell(Map map) throws SQLException;

    /**
     * 获取需要结算的商户
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public List selectSellersNeedSettle(Map map) throws SQLException;

    /**
     * 查询商家名称
     * 
     * @param supplierName
     * @return
     * @throws ServiceException
     */
    public List<SellerSettlement> selectSupplierListByName(String supplierName) throws SQLException;

    public List<SellerSettlement> selectAllSupplier() throws SQLException;

    /**
     * 商户 年度内存在的结算单
     * 
     * @param sellerId
     * @param period
     * @return
     * @throws ServiceException
     */
    public List<String> selectSupplierByLikePeriod(String sellerId, String period)
            throws SQLException;

    /**
     * 修改结算单 财务确认
     * 
     * @param record
     * @param example
     * @return
     * @throws ServiceException
     */
    int updateFinancialConfirmation(SellerSettlement record) throws SQLException;

    /**
     * 修改结算单 商家确认
     * 
     * @param record
     * @param example
     * @return
     * @throws ServiceException
     */
    int updateSellerConfirmation(SellerSettlement record) throws SQLException;

    /**
     * 结出到商家余额
     * 
     * @param record
     * @return
     * @throws SQLException
     */
    int finacialAmountSettle(SellerSettlement record) throws SQLException;


    /**
     * 获取当期应结算差异调整金额总额
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public BigDecimal selectSumAdjForSettle(Map map) throws SQLException;

    /**
     * 通过登录账号id获取电话号码
     * 
     * @param record
     * @return
     * @throws SQLException
     */
    public String selectMobieByLoginId(SellerSettlement record) throws SQLException;

    public Long queryLoginIdByCommercialId(String sellerId) throws SQLException;

    /**
     * 查询预售超时未发货赔付补偿金额
     * 
     * @param map
     * @return
     * @throws SQLException
     */
    public Map queryCompensateForPressell(Map map) throws SQLException;
    
    /**
     * 查询结算单报表导出数据
     * 
     * @param criteria
     * @return
     * @throws SQLException
     */
    public List<Map<String,Object>> querySettlementListForExport(SellerSettlementCriteria criteria)
            throws SQLException;
    
    
}
