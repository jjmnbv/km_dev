/*删除微商业务 package com.pltfm.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.pltfm.app.dao.BaseDAO;
import com.pltfm.app.dao.SpreadEffectDAO;
import com.pltfm.app.dataobject.UserInfoDO;
import com.pltfm.app.vobject.SpreadEffect;
import com.pltfm.app.vobject.SpreadEffectExample;
import com.pltfm.app.vobject.SpreaderInfo;

@SuppressWarnings("unchecked")
@Repository("spreadEffectDAO")
public class SpreadEffectDAOImpl extends BaseDAO implements SpreadEffectDAO {
  private static final Logger log = Logger.getLogger(SpreadEffectDAOImpl.class);

  *//**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  @Resource
  private SqlMapClient sqlMapClient;

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int countByExample(SpreadEffectExample example) throws SQLException {
    Integer count =
        (Integer) sqlMapClient.queryForObject("SPREAD_EFFECT.ibatorgenerated_countByExample",
            example);
    return count.intValue();
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int deleteByExample(SpreadEffectExample example) throws SQLException {
    int rows = sqlMapClient.delete("SPREAD_EFFECT.ibatorgenerated_deleteByExample", example);
    return rows;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int deleteByPrimaryKey(BigDecimal seid) throws SQLException {
    SpreadEffect key = new SpreadEffect();
    key.setSeid(seid);
    int rows = sqlMapClient.delete("SPREAD_EFFECT.ibatorgenerated_deleteByPrimaryKey", key);
    return rows;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public BigDecimal insert(SpreadEffect record) throws SQLException {
    Object newKey = sqlMapClient.insert("SPREAD_EFFECT.ibatorgenerated_insert", record);
    return (BigDecimal) newKey;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public BigDecimal insertSelective(SpreadEffect record) throws SQLException {
    Object newKey = sqlMapClient.insert("SPREAD_EFFECT.ibatorgenerated_insertSelective", record);
    return (BigDecimal) newKey;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public List selectByExample(SpreadEffectExample example) throws SQLException {
    List list = sqlMapClient.queryForList("SPREAD_EFFECT.ibatorgenerated_selectByExample", example);
    return list;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public SpreadEffect selectByPrimaryKey(BigDecimal seid) throws SQLException {
    SpreadEffect key = new SpreadEffect();
    key.setSeid(seid);
    SpreadEffect record =
        (SpreadEffect) sqlMapClient.queryForObject(
            "SPREAD_EFFECT.ibatorgenerated_selectByPrimaryKey", key);
    return record;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int updateByExampleSelective(SpreadEffect record, SpreadEffectExample example)
      throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows = sqlMapClient.update("SPREAD_EFFECT.ibatorgenerated_updateByExampleSelective", parms);
    return rows;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int updateByExample(SpreadEffect record, SpreadEffectExample example) throws SQLException {
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows = sqlMapClient.update("SPREAD_EFFECT.ibatorgenerated_updateByExample", parms);
    return rows;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int updateByPrimaryKeySelective(SpreadEffect record) throws SQLException {
    int rows =
        sqlMapClient.update("SPREAD_EFFECT.ibatorgenerated_updateByPrimaryKeySelective", record);
    return rows;
  }

  *//**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  public int updateByPrimaryKey(SpreadEffect record) throws SQLException {
    int rows = sqlMapClient.update("SPREAD_EFFECT.ibatorgenerated_updateByPrimaryKey", record);
    return rows;
  }

  *//**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * SPREAD_EFFECT
   * 
   * @ibatorgenerated Fri May 08 11:38:44 CST 2015
   *//*
  private static class UpdateByExampleParms extends SpreadEffectExample {
    private Object record;

    public UpdateByExampleParms(Object record, SpreadEffectExample example) {
      super(example);
      this.record = record;
    }

    @SuppressWarnings("unused")
    public Object getRecord() {
      return record;
    }
  }

  @Override
  public List<SpreadEffect> querySpreadEffectList(Map map) throws SQLException {
    List<SpreadEffect> seList =
        sqlMapClient.queryForList("SPREAD_EFFECT.querySpreadEffectListByMap", map);
    return seList;
  }

  @Override
  public SpreadEffect selectSpeadEffect(Map mapTemp) throws SQLException {

    return (SpreadEffect) sqlMapClient.queryForObject("SPREAD_EFFECT.selectSpeadEffect", mapTemp);
  }

  @Override
  public int updateSpreadOrder(SpreadEffect spereadEffect) throws SQLException {
    int rows = sqlMapClient.update("SPREAD_EFFECT.updateSpreadOrder", spereadEffect);
    return rows;
  }

  @Override
  public SpreadEffect getSpreandRecommenders(Map tempMap) throws SQLException {
    return (SpreadEffect) sqlMapClient.queryForObject("SPREAD_EFFECT.getSpreandRecommenders",
        tempMap);
  }

  @Override
  public List<SpreadEffect> querySpreadEffectDetailList(Map map) throws SQLException {
    List<SpreadEffect> seList =
        sqlMapClient.queryForList("SPREAD_EFFECT.querySpreadEffectDetailListByMap", map);
    return seList;
  }

  @Override
  public List<SpreadEffect> getOrderSpreand(Map map) throws SQLException {
    List<SpreadEffect> seList = sqlMapClient.queryForList("SPREAD_EFFECT.getOrderSprenand", map);
    return seList;
  }

  *//**
   * 定时任务查询推广效果
   * 
   * @return
   * @throws SQLException
   *//*
  @Override
  public List<SpreadEffect> querySpreadEffectForJob(int settDate) throws SQLException {
    return sqlMapClient.queryForList("SPREAD_EFFECT.SQL_QUERY_SPREAD_EFFECT_FOR_JOB", settDate);
  }

  *//**
   * 结算推广效果
   * 
   * @param seid
   * @return
   * @throws SQLException
   *//*
  @Override
  public boolean settSpreadEffectForJob(SpreadEffect se) throws SQLException {
    return sqlMapClient.update("SPREAD_EFFECT.SQL_UPDATE_SETT_SPREAD_EFFECT_FOR_JOB", se) > 0;
  }

  *//**
   * 取消结算推广效果
   * 
   * @param seid
   * @return
   * @throws SQLException
   *//*
  @Override
  public boolean CancelSettSpreadEffectForJob(Long seid) throws SQLException {
    try {
      return sqlMapClient
          .update("SPREAD_EFFECT.SQL_UPDATE_CANCEL_SETT_SPREAD_EFFECT_FOR_JOB", seid) > 0;
    } catch (Exception e) {
      log.error("取消结算推广效果发生异常", e);
    }
    return false;
  }

  *//**
   * 查询推广效果结算冻结时间
   * 
   * @return
   * @throws SQLException
   *//*
  public Integer querySettleWaitDay() throws SQLException {
    return (Integer) sqlMapClient.queryForObject("SPREAD_EFFECT.SQL_QUERY_SETTLE_WAIT_DAY");
  }

  *//**
   * 查询推广效果
   * 
   * @return
   * @throws SQLException
   * @author lijianjun
   *//*
  public List<SpreadEffect> selectBySpreadEffect(SpreadEffect spreadEffect) throws SQLException {
    return sqlMapClient.queryForList("SPREAD_EFFECT.ibatorgenerated_selectBySpreadEffect",
        spreadEffect);
  }

  *//**
   * 查询用户account_info信息
   * 
   * @param userInfo
   * @return
   * @throws SQLException
   * @author lijianjun
   *//*
  public SpreaderInfo selectProductNameBySku(SpreaderInfo spreaderInfo) throws SQLException {
    return (SpreaderInfo) sqlMapClient.queryForObject("SPREAD_EFFECT.selectProductNameBySku",
        spreaderInfo);
  }

  *//**
   * 关联微商表查询account_info信息
   * 
   * @param loginId
   * @return
   * @throws SQLException
   * @author lijianjun
   *//*
  public SpreaderInfo selectuserInfoRelationSpreadInfo(Long loginId) throws SQLException {
    return (SpreaderInfo) sqlMapClient.queryForObject(
        "SPREAD_EFFECT.selectuserInfoRelationSpreadInfo", loginId);
  }

  *//**
   * 查询用户account_info信息
   * 
   * @param userInfo
   * @return
   * @throws SQLException
   * @author lijianjun
   *//*
  public UserInfoDO selectuserInfo(Long loginId) throws SQLException {
    return (UserInfoDO) sqlMapClient.queryForObject("SPREAD_EFFECT.selectuserInfo", loginId);
  }
}
*/