package com.pltfm.app.vobject;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppraisePropValExample implements Serializable {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public AppraisePropValExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    protected AppraisePropValExample(AppraisePropValExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table APPRAISE_PROP_VAL
     *
     * @ibatorgenerated Wed Aug 21 10:48:26 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andAppraisePropValIdIsNull() {
            addCriterion("APPRAISE_PROP_VAL_ID is null");
            return this;
        }

        public Criteria andAppraisePropValIdIsNotNull() {
            addCriterion("APPRAISE_PROP_VAL_ID is not null");
            return this;
        }

        public Criteria andAppraisePropValIdEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID =", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdNotEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID <>", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdGreaterThan(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID >", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID >=", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdLessThan(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID <", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdLessThanOrEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_VAL_ID <=", value, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdIn(List values) {
            addCriterion("APPRAISE_PROP_VAL_ID in", values, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdNotIn(List values) {
            addCriterion("APPRAISE_PROP_VAL_ID not in", values, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("APPRAISE_PROP_VAL_ID between", value1, value2, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropValIdNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("APPRAISE_PROP_VAL_ID not between", value1, value2, "appraisePropValId");
            return this;
        }

        public Criteria andAppraisePropIdIsNull() {
            addCriterion("APPRAISE_PROP_ID is null");
            return this;
        }

        public Criteria andAppraisePropIdIsNotNull() {
            addCriterion("APPRAISE_PROP_ID is not null");
            return this;
        }

        public Criteria andAppraisePropIdEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID =", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdNotEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID <>", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdGreaterThan(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID >", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID >=", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdLessThan(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID <", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdLessThanOrEqualTo(BigDecimal value) {
            addCriterion("APPRAISE_PROP_ID <=", value, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdIn(List values) {
            addCriterion("APPRAISE_PROP_ID in", values, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdNotIn(List values) {
            addCriterion("APPRAISE_PROP_ID not in", values, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("APPRAISE_PROP_ID between", value1, value2, "appraisePropId");
            return this;
        }

        public Criteria andAppraisePropIdNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("APPRAISE_PROP_ID not between", value1, value2, "appraisePropId");
            return this;
        }

        public Criteria andPointIsNull() {
            addCriterion("POINT is null");
            return this;
        }

        public Criteria andPointIsNotNull() {
            addCriterion("POINT is not null");
            return this;
        }

        public Criteria andPointEqualTo(Short value) {
            addCriterion("POINT =", value, "point");
            return this;
        }

        public Criteria andPointNotEqualTo(Short value) {
            addCriterion("POINT <>", value, "point");
            return this;
        }

        public Criteria andPointGreaterThan(Short value) {
            addCriterion("POINT >", value, "point");
            return this;
        }

        public Criteria andPointGreaterThanOrEqualTo(Short value) {
            addCriterion("POINT >=", value, "point");
            return this;
        }

        public Criteria andPointLessThan(Short value) {
            addCriterion("POINT <", value, "point");
            return this;
        }

        public Criteria andPointLessThanOrEqualTo(Short value) {
            addCriterion("POINT <=", value, "point");
            return this;
        }

        public Criteria andPointIn(List values) {
            addCriterion("POINT in", values, "point");
            return this;
        }

        public Criteria andPointNotIn(List values) {
            addCriterion("POINT not in", values, "point");
            return this;
        }

        public Criteria andPointBetween(Short value1, Short value2) {
            addCriterion("POINT between", value1, value2, "point");
            return this;
        }

        public Criteria andPointNotBetween(Short value1, Short value2) {
            addCriterion("POINT not between", value1, value2, "point");
            return this;
        }

        public Criteria andPropValIsNull() {
            addCriterion("PROP_VAL is null");
            return this;
        }

        public Criteria andPropValIsNotNull() {
            addCriterion("PROP_VAL is not null");
            return this;
        }

        public Criteria andPropValEqualTo(String value) {
            addCriterion("PROP_VAL =", value, "propVal");
            return this;
        }

        public Criteria andPropValNotEqualTo(String value) {
            addCriterion("PROP_VAL <>", value, "propVal");
            return this;
        }

        public Criteria andPropValGreaterThan(String value) {
            addCriterion("PROP_VAL >", value, "propVal");
            return this;
        }

        public Criteria andPropValGreaterThanOrEqualTo(String value) {
            addCriterion("PROP_VAL >=", value, "propVal");
            return this;
        }

        public Criteria andPropValLessThan(String value) {
            addCriterion("PROP_VAL <", value, "propVal");
            return this;
        }

        public Criteria andPropValLessThanOrEqualTo(String value) {
            addCriterion("PROP_VAL <=", value, "propVal");
            return this;
        }

        public Criteria andPropValLike(String value) {
            addCriterion("PROP_VAL like", value, "propVal");
            return this;
        }

        public Criteria andPropValNotLike(String value) {
            addCriterion("PROP_VAL not like", value, "propVal");
            return this;
        }

        public Criteria andPropValIn(List values) {
            addCriterion("PROP_VAL in", values, "propVal");
            return this;
        }

        public Criteria andPropValNotIn(List values) {
            addCriterion("PROP_VAL not in", values, "propVal");
            return this;
        }

        public Criteria andPropValBetween(String value1, String value2) {
            addCriterion("PROP_VAL between", value1, value2, "propVal");
            return this;
        }

        public Criteria andPropValNotBetween(String value1, String value2) {
            addCriterion("PROP_VAL not between", value1, value2, "propVal");
            return this;
        }
    }
}