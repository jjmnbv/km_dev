<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd ">

    <context:annotation-config/>
    <context:component-scan base-package="com.kmzyc"/>
    <aop:aspectj-autoproxy/>


    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间；单位为秒。 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <bean id="dataSourceCustomer" parent="parentDataSource">
        <property name="name" value="dataSourceCustomer"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxActive" value="${maxActive}"/>
    </bean>

    <!--<bean id="dynamicDataSource" class="com.km.framework.persistence.util.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map>-->
                <!--<entry value-ref="dataSourceCustomer" key="dataSourceCustomer"></entry>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="defaultTargetDataSource" ref="dataSourceCustomer"/>-->
    <!--</bean>-->

    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="configLocation" value="classpath:ibatis/SqlMapConfig.xml"/>
        <!-- 单个sevice事务生效，不能跨数据源调用sevice，否则事务失效 -->
        <property name="dataSource" ref="dataSourceCustomer"/>
    </bean>

    <!-- 配置JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSourceCustomer"/>
    </bean>

    <!-- mybatis 配置 -->
    <!-- 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dynamicDataSource" />
            <property name="configLocation" value="classpath:mybatis/MybatisConfig.xml" />
        </bean>

        <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg ref="sqlSessionFactory" />
        </bean> -->
    <!-- end mybatis 配置 -->

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceCustomer"/>
    </bean>
    <!--<bean id="transactionManagerDynamic"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>-->

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 暂时先根据Exception，拦截所有的异常进行rollback，默认RuntimeException -->
            <!--<tx:method name="save*" propagation="REQUIRED"  rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
             <tx:method name="add*" propagation="REQUIRED"  rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/> 
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <tx:method name="delMyPurchaseList" propagation="REQUIRED" rollback-for="Exception"/>
            <!--  <tx:method name="cancel*" propagation="REQUIRED" rollback-for="Exception"/>
       兼容com.kmzyc.b2b.third.service.impl.ThirdBindInfoServiceImpl
              com.kmzyc.b2b.third.service.impl.ThirdAccountInfoServiceImpl
      -->
            <tx:method name="commonBi*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="unBind*" propagation="REQUIRED" rollback-for="Exception"/>
            <!--<tx:method name="fanliUserBindInfo" propagation="REQUIRED" rollback-for="Exception"/>-->
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.kmzyc.b2b.service..*+.*(..))
        or execution(* com.kmzyc.b2b.third.service..*+.*(..))"/>
        <!-- 关键配置，切换数据源一定要比事务更先执行 dataSource = 1 -->
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut" order="2"/>
    </aop:config>


    <!-- 线程池 -->
    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="${threadPoolCorePoolSize}"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="${threadPoolKeepAliveSeconds}"/>
        <!-- 线程池维护线程的最大数量 -->
        <property name="maxPoolSize" value="${threadPoolMaxPoolSize}"/>
        <!-- 线程池所使用的缓冲队列 -->
        <property name="queueCapacity" value="${threadPoolQueueCapacity}"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <bean id="eventBus" class="com.google.common.eventbus.AsyncEventBus">
        <constructor-arg name="executor" ref="taskExecutor"/>
    </bean>

    <!-- spring 工具类 -->
    <bean id="springUtils" class="com.kmzyc.util.SpringUtils"/>
</beans>
