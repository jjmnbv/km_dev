<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="ProductStock">
	<resultMap id="ProductStockResultMap" class="com.kmzyc.b2b.model.ProductStock">
		<result column="STOCK_ID" property="stockId" jdbcType="DECIMAL" />
		<result column="WAREHOUSE_ID" property="warehouseId" jdbcType="DECIMAL" />
		<result column="PRODUCT_ID" property="productId" jdbcType="DECIMAL" />
		<result column="PRODUCT_NAME" property="productName" jdbcType="VARCHAR" />
		<result column="PRODUCT_NO" property="productNo" jdbcType="VARCHAR" />
		<result column="SKU_ATTRIBUTE_ID" property="skuAttributeId"
			jdbcType="DECIMAL" />
		<result column="SKU_ATT_VALUE" property="skuAttValue" jdbcType="VARCHAR" />
		<result column="STOCK_QUALITY" property="stockQuality"
			jdbcType="DECIMAL" />
		<result column="ORDER_QUALITY" property="orderQuality"
			jdbcType="DECIMAL" />
		<result column="IN_TRANSIT_QUALITY" property="inTransitQuality"
			jdbcType="DECIMAL" />
		<result column="ALARM_QUALITY" property="alarmQuality"
			jdbcType="DECIMAL" />
		<result column="TOTAL_SALES" property="totalSales" jdbcType="DECIMAL" />
		<result column="PRICE" property="price" jdbcType="DECIMAL" />
		<result column="MIN_DAY" property="minDay" jdbcType="DECIMAL" />
		<result column="MAX_DAY" property="maxDay" jdbcType="DECIMAL" />
		<result column="ADJUST" property="adjust" jdbcType="DECIMAL" />
		<result column="REMARK" property="remark" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap class="com.kmzyc.b2b.model.ProductStockInterface" id="reMap">
		<result column="productStockSum" property="sum" javaType="Double"/>
		<result column="status" property="status" javaType="Integer" />
	</resultMap>

	<select id="findBySkuId" parameterClass="string" resultClass="double">
		select Max(case when stock_quality is null then 0 else stock_quality
		end)
		from (select a.WAREHOUSE_ID,
		sum(case
		when a.STOCK_QUALITY > a.ORDER_QUALITY then
		a.STOCK_QUALITY - a.ORDER_QUALITY
		else
		0
		end) as stock_quality
		from product_stock a, PRODUCTMAIN b
		where a.product_id = b.product_id
		and b.STATUS = '3'
		and a.SKU_ATTRIBUTE_ID = #skuAttributeId#
		group by a.WAREHOUSE_ID)
	</select>

	<select id="findByLongSkuId" parameterClass="Long" resultClass="double">
		select Max(stock_quality) from
		(select WAREHOUSE_ID,sum(STOCK_QUALITY)
		stock_quality from product_stock
		where
		SKU_ATTRIBUTE_ID=#skuAttributeId# group by WAREHOUSE_ID
		)
	</select>

	<!-- create by lijianjun -->
	<!-- cms获取库存 -->
	<select id="queryProductStockById" parameterClass="Integer"
		resultMap="reMap">
			select max(productStockSum) productStockSum, status status,product_sku_id skuId
  from (select st.warehouse_id, m.status,sk.product_sku_id,
               case  when sum(STOCK_QUALITY - ORDER_QUALITY) is null then 0
                 else sum(STOCK_QUALITY - ORDER_QUALITY) end as productStockSum
          from productmain m
          left join product_sku sk
            on m.product_id = sk.product_id
          left join product_stock st
            on sk.product_sku_id = st.sku_attribute_id
            and st.stock_quality>0 and st.order_quality>=0
         where sk.product_sku_id = #productSkuId#    
         group by st.warehouse_id, m.status,sk.product_sku_id)
 group by status,product_sku_id
	</select>

	<select id="queryRealStockBySkuId" parameterClass="java.lang.Long" resultClass="java.lang.Integer">
		select nvl(sum(ps.stock_quality-ps.order_quality),0) asreal_stock
          from product_stock ps,productmain pm
        where ps.product_id=pm.product_id
          and pm.status='3'
          and ps.sku_attribute_id=#productSkuId#
	</select>


	<select id="queryWarehouseOfMaxproductAmount" parameterClass="string"
		resultClass="long">
		select WAREHOUSE_ID from ( select
		WAREHOUSE_ID,sum(STOCK_QUALITY-ORDER_QUALITY)
		stock_quality from product_stock
		where
		SKU_ATTRIBUTE_ID=#skuAttributeId# group by WAREHOUSE_ID order by
		stock_quality desc
		) where rownum =1
	</select>
	
	<select id="checkProductStockNumISOKInOrder"  parameterClass="string" resultClass="string">
	<![CDATA[
		select 
		       stockNum.product_title PROCUCT_NAME
		  from (select Max(case
		                     when stock_quality is null then
		                      0
		                     else
		                      stock_quality
		                   end) maxstock,
		               PRODUCT_SKU_CODE,
		               product_title
		          from (select a.WAREHOUSE_ID,
		                       s.PRODUCT_SKU_CODE,
		                       b.product_title,
		                       sum(case
                                 when a.STOCK_QUALITY > a.ORDER_QUALITY then
                                  a.STOCK_QUALITY - a.ORDER_QUALITY
                                 else
                                  0
                               end) as stock_quality
		                  from product_stock a, PRODUCTMAIN b, PRODUCT_SKU s
		                 where a.product_id = b.product_id
		                   and s.PRODUCT_SKU_ID = a.SKU_ATTRIBUTE_ID
		                   and s.PRODUCT_SKU_CODE in
		                       (select commodity_sku
		                          from ORDER_ITEM
		                         where order_code = #orderCode#)
		                 group by a.WAREHOUSE_ID, s.PRODUCT_SKU_CODE, b.product_title)
		         GROUP by PRODUCT_SKU_CODE, product_title) stockNum,
		       (select sum(COMMODITY_NUMBER) as COMMODITY_NUMBER ,commodity_sku
		          from ORDER_ITEM
		         where order_code = #orderCode# group by commodity_sku) item
		 where stockNum.PRODUCT_SKU_CODE = item.commodity_sku
		   and stockNum.maxstock < item.COMMODITY_NUMBER
		  ]]>		
	</select>
	
	<select id="queryOrderProductIsOutOfShelf" parameterClass="string" resultClass="string">
		select  m.product_title PROCUCT_NAME
		  from productmain m, PRODUCT_SKU s, ORDER_ITEM i
		 where m.PRODUCT_ID = s.PRODUCT_ID
		   and s.PRODUCT_SKU_CODE = i.COMMODITY_SKU
		   and m.STATUS = 4
		   and i.ORDER_CODE = #orderCode# and  i.COMMODITY_TYPE not in(3,4,5)
	</select>
	
		<select id="queryWarehouseName" parameterClass="java.lang.Long" resultClass="string">
		select  wi.WAREHOUSE_NAME
 		 from (select e.*,
               row_number() over(partition by SKU_ATTRIBUTE_ID order by(stock_quality - order_quality) desc) rn
         		 from product_stock e) a,
      			 WAREHOUSE_INFO wi
 				  where a.rn = 1
				   and a.WAREHOUSE_ID = wi.WAREHOUSE_ID
				   and a.SKU_ATTRIBUTE_ID = #productSkuId#
	</select>
	
	<!-- 查询库存套餐信息 -->
	<select id="SQL_QUERY_SUIT_STOCK_INFO" parameterClass="java.lang.Long" resultClass="java.util.HashMap">
		select to_char(pr.relation_id) suitId,
		       to_char(prd.relation_sku_id) skuId,
		       to_char(nvl(prd.product_count, 0)) productCount,
		       to_char(nvl((select max(st.stock_quality - st.order_quality)
                     from product_stock st
                    where st.sku_attribute_id = prd.relation_sku_id),0)) stockCount
		  from product_relation pr
		 inner join product_relation_detail prd
		    on (prd.relation_id = pr.relation_id)
		 where pr.relation_id = #suitId#
		  order by pr.relation_id
	</select>
	
	<!-- 批量查询库存套餐信息 -->
	<select id="SQL_QUERY_BATCH_SUIT_STOCK_INFO" parameterClass="java.util.List" resultClass="java.util.HashMap">
		select to_char(pr.relation_id) suitId,
		       to_char(prd.relation_sku_id) skuId,
		       to_char(nvl(prd.product_count, 0)) productCount,
		       to_char(nvl((select max(st.stock_quality - st.order_quality)
                     from product_stock st
                    where st.sku_attribute_id = prd.relation_sku_id),0)) stockCount
		  from product_relation pr
		 inner join product_relation_detail prd
		    on (prd.relation_id = pr.relation_id)
		 where pr.relation_id in 
		 	<iterate open="(" close=")" conjunction="," >
				#[]#
			</iterate>
		 order by pr.relation_id
	</select>
		
		<!-- 查询库存 -->
		<select id="SQL_QUERY_PRODUCT_STOCK_BY_SKU_ID" parameterClass="java.lang.Long" resultMap="reMap">
			select st.stock_quality - st.order_quality productStockSum,
			       #skuId:DECIMAL# skuId,
			       (select decode(pm.status,
			                      3,
			                      (select decode(ps.status, 1, 3, ps.status)
			                         from product_sku ps
			                        where ps.product_sku_id = #skuId:DECIMAL#),
			                      pm.status)
			          from productmain pm
			         where pm.product_id = st.product_id) status
			  from product_stock st
			 where st.stock_quality > 0
			   and st.order_quality >= 0
			   and st.stock_quality > st.order_quality
			   and st.sku_attribute_id = #skuId:DECIMAL#
			   and rownum = 1
		</select>
		
	<resultMap class="com.kmzyc.b2b.model.ProductStockInterface" id="stockMap">
		<result column="skuId" property="skuId" jdbcType="DECIMAL" />
		<result column="sum" property="sum" jdbcType="DECIMAL" />
		<result column="status" property="status" jdbcType="DECIMAL" />
	</resultMap>
	<!-- 批量查询库存 -->
	<select id="SQL_QUERY_BATCH_STOCK_INFO" parameterClass="java.util.List" resultMap="stockMap">
	<![CDATA[
		select st.stock_quality - (case when st.order_quality < 0 then 0 else st.order_quality end) sum,
		       st.sku_attribute_id skuId,
		       decode(pm.status, 3, decode(ps.status, 1, 3, ps.status)) status
		  from product_stock st, product_sku ps, productmain pm
		 where pm.product_id = st.product_id
		   and ps.product_sku_id = st.sku_attribute_id
		   and st.stock_quality - st.order_quality > 0
		   and st.sku_attribute_id in (
	]]>		   
		<iterate conjunction=","> #[]# </iterate>
			)
	</select>
	<resultMap class="java.util.HashMap" id="wareMap">
		<result column="SKUID" property="SKUID" javaType="java.lang.Long"/>
		<result column="WAREID" property="WAREID"/>
	</resultMap>
	<!-- 查询库存ID -->
	<select id="SQL_QUERY_WAREHOUSE_ID" parameterClass="java.util.List" resultMap="wareMap">
		select ps.warehouse_id WAREID,
		       ps.sku_attribute_id SKUID
		  from product_stock ps
		 where ps.sku_attribute_id in (<iterate conjunction=","> #[]# </iterate>)
		 order by ps.stock_quality - ps.order_quality asc
	</select>
	<!-- 查询SKU库存 -->
	<resultMap class="java.util.HashMap" id="skuStockMap">
		<result column="SKUID" property="SKUID" javaType="java.lang.Long"/>
		<result column="STOCK" property="STOCK" javaType="java.lang.Integer"/>
	</resultMap>
	<select id="SQL_QUERY_SKU_STOCK" parameterClass="java.util.List" resultMap="skuStockMap">
	<![CDATA[
		select st.stock_quality - (case
		         when st.order_quality < 0 then
		          0
		         else
		          st.order_quality
		       end) STOCK,
		       st.sku_attribute_id SKUID
		  from product_stock st
		 where st.stock_quality - st.order_quality > 0
		   and st.sku_attribute_id in (
	]]>		   
		<iterate conjunction=","> #[]# </iterate>
			)
	</select>
	
	<!-- 20151222 add 当出现多仓情况时,查询其 (库存数-订购数) 最大的那一条记录 -->
	<select id="queryMaxStockRecord" parameterClass="java.lang.Long" resultClass="com.kmzyc.b2b.model.ProductStock">
	(select a.stock_id stockId, a.warehouse_id warehouseId, a.sku_attribute_id skuAttributeId, a.sku_att_value skuAttValue, a.stock_quality stockQuality, a.order_quality orderQuality 
		from
		(select e.stock_id, e.warehouse_id, e.sku_attribute_id, e.sku_att_value, e.stock_quality, e.order_quality,
		       row_number() over(partition by SKU_ATTRIBUTE_ID order by (stock_quality-order_quality) desc) rn
		from product_stock e) a 
		where a.rn=1 and a.sku_attribute_id=#productSkuId:DECIMAL#)
	</select>
</sqlMap>
