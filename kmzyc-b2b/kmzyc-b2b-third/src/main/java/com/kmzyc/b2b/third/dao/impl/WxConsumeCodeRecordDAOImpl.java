package com.kmzyc.b2b.third.dao.impl;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.b2b.third.dao.WxConsumeCodeRecordDAO;
import com.kmzyc.b2b.third.model.wxCard.QueryPara;
import com.kmzyc.b2b.third.model.wxCard.WxConsumeCodeRecord;
import com.kmzyc.b2b.third.model.wxCard.WxKmrsShopInfo;
import com.kmzyc.b2b.third.model.wxCard.WxReservation;

@Repository("wxConsumeCodeRecordDaoImpl")
public class WxConsumeCodeRecordDAOImpl implements WxConsumeCodeRecordDAO {
    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table WX_CONSUME_CODE_RECORD
     * 
     * @ibatorgenerated Mon Jan 26 10:30:58 CST 2015
     */
    @Resource(name = "sqlMapClient")
    private SqlMapClient sqlMapClient;

    public void insert(WxConsumeCodeRecord record) throws SQLException {

        sqlMapClient.insert("WX_CONSUME_CODE_RECORD.ibatorgenerated_insert", record);
    }

    public void insertSelective(WxConsumeCodeRecord record) throws SQLException {

        sqlMapClient.insert("WX_CONSUME_CODE_RECORD.insertSelective", record);
    }

    @Override
    public List<QueryPara> queryActiveCodeForImport(String couponId, int min, int max,
            String tableName) throws SQLException {

        QueryPara condition = new QueryPara();
        condition.setCouponId(couponId);
        condition.setStartIndex(min);
        condition.setEndIndex(max);
        condition.setEndIndex(max);
        condition.setTableName(tableName);
        return sqlMapClient.queryForList("WX_CONSUME_CODE_RECORD.queryCode", condition);
    }

    @Override
    public Integer queryShopVerifyCode(String verifyCode) throws SQLException {

        QueryPara condition = new QueryPara();
        condition.setShopVerifyCode(verifyCode);
        return (Integer) sqlMapClient.queryForObject("WX_CONSUME_CODE_RECORD.queryVerifyCode",
                condition);
    }

    @Override
    public void insertReservation(WxReservation para) throws SQLException {

        sqlMapClient.insert("WX_RESERVATION.saveInfo", para);
    }

    @Override
    public WxReservation queryReservationByCodeAndId(WxReservation para) throws SQLException {

        return (WxReservation) sqlMapClient.queryForObject("WX_RESERVATION.queryByCodeAndCardId",
                para);
    }

    @Override
    public List<WxKmrsShopInfo> queryAllKmrsShopInfo() throws SQLException {

        return sqlMapClient.queryForList("WX_CONSUME_CODE_RECORD.queryKmrsInfo");
    }

    @Override
    public Integer queryConsumeByCardIdAndCode(String cardId, String code) throws SQLException {
        WxConsumeCodeRecord condition = new WxConsumeCodeRecord();
        condition.setCardId(cardId);
        condition.setCode(code);
        return (Integer) sqlMapClient.queryForObject(
                "WX_CONSUME_CODE_RECORD.queryConsumeInfoByCardIdAndCode", condition);
    }
}
