package com.pltfm.cms.dao.impl;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.pltfm.cms.dao.CmsUserSiteDAO;
import com.pltfm.cms.vobject.CmsUserSite;
import com.pltfm.cms.vobject.CmsUserSiteExample;
import com.pltfm.cms.vobject.CmsUserSiteShow;

import org.springframework.stereotype.Component;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

@Component("cmsUserSiteDAO")
public class CmsUserSiteDAOImpl implements CmsUserSiteDAO {
    @Resource(name = "sqlMapClient")
    private SqlMapClient sqlMapClient;


    /***
     *
     * 删除站点与用户
     * */
    public Integer delete(Integer userSiteId) throws SQLException {
        CmsUserSite key = new CmsUserSite();
        key.setUserSiteId(userSiteId);
        Integer rows = sqlMapClient.delete("CMS_USER_SITE.ibatorgenerated_delete", key);
        return rows;
    }

    /***
     *
     * 查询用户下站点
     * */

    public List selectStieName(Integer userid) throws SQLException {
        List list = sqlMapClient.queryForList("CMS_USER_SITE.ibatorgenerated_selUser_Site", userid);
        return list;
    }

    /***
     *
     * 跟据站点id查询是否关系到用户站点表
     * */

    public Integer checkUserSite(Integer id) throws SQLException {
        Integer count = (Integer) sqlMapClient.queryForObject("CMS_USER_SITE.ibatorgenerated_checkUserSite", id);
        return count;
    }

    /***
     *
     * 添加站点与用户
     * */
    public Integer insert(CmsUserSite record) throws SQLException {
        Object keyObject = sqlMapClient.insert("CMS_USER_SITE.ibatorgenerated_insert", record);
        return (Integer) keyObject;
    }

    /***
     *
     * 跟据id查询站点与用户
     * */
    public CmsUserSite selectById(Integer userSiteId) throws SQLException {
        CmsUserSite key = new CmsUserSite();
        key.setUserSiteId(userSiteId);
        CmsUserSite record = (CmsUserSite) sqlMapClient.queryForObject("CMS_USER_SITE.ibatorgenerated_selectUserSiteId", key);
        return record;
    }

    /***
     *
     * 修改查询站点与用户
     * */
    public Integer update(CmsUserSite record) throws SQLException {
        Integer rows = sqlMapClient.update("CMS_USER_SITE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /***
     *
     * 通过多条件查询统数据总条数
     * */
    public Integer count(CmsUserSite cmsUserSite) throws SQLException {
        Integer count = (Integer) sqlMapClient.queryForObject("CMS_USER_SITE.selectCountByVo", cmsUserSite);
        return count;
    }

    /***
     *
     * 分页查询
     * */
    public List select(CmsUserSite cmsUserSite) throws SQLException {
        List list = sqlMapClient.queryForList("CMS_USER_SITE.searchPageByVo", cmsUserSite);
        return list;
    }

    /***
     *
     * 跟据用户Id查询用户所有的站点
     * */
    public List cmsUserSite(Integer id) throws SQLException {
        return sqlMapClient.queryForList("CMS_USER_SITE.searchUserId", id);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_USER_SITE
     *
     * @ibatorgenerated Fri Nov 15 13:56:27 CST 2013
     */
    public int updateByExample(CmsUserSite record, CmsUserSiteExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("CMS_USER_SITE.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_USER_SITE
     *
     * @ibatorgenerated Fri Nov 15 13:56:27 CST 2013
     */
    public int updateByPrimaryKeySelective(CmsUserSite record) throws SQLException {
        int rows = sqlMapClient.update("CMS_USER_SITE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }


    /**
     * 用户站点信息总数量
     *
     * @param cmsUserSite 用户站点信息实体
     * @throws SQLException 异常
     * @return 返回值
     */
    @Override
    public Integer countByCmsUserSite(CmsUserSite cmsUserSite)
            throws SQLException {
        Integer count = (Integer) sqlMapClient.queryForObject(
                "CMS_USER_SITE.abatorgenerated_countByUserSite", cmsUserSite);
        return count;
    }

    /**
     * 分页查询用户站点信息
     *
     * @param cmsUserSite 用户站点信息实体
     * @throws SQLException 异常
     * @return 返回值
     */
    @Override
    public List queryForPage(CmsUserSite cmsUserSite) throws SQLException {
        return sqlMapClient.queryForList("CMS_USER_SITE.abatorgenerated_UserSite", cmsUserSite);
    }

    /**
     * 跟据站点查询用户信息
     */
    public List<CmsUserSite> selUse(Integer siteId) throws SQLException {
        return sqlMapClient.queryForList("CMS_USER_SITE.ibatorgenerated_selUse", siteId);
    }

    /**
     * 查询用户所拥有的站点信息
     *
     * @param userSite 用户站点对应实体
     * @return 所有用户所拥有的站点信息
     * @throws Exception 异常信息
     */
    public List<CmsUserSiteShow> queryUserSiteList(CmsUserSite userSite) throws SQLException {
        return sqlMapClient.queryForList("CMS_USER_SITE.querUserSiteList", userSite);
    }

    /**
     * 查询用户所拥有的站点的总数
     *
     * @param userSite 用户站点对应实体
     * @return 所有用户所拥有的站点信息
     * @throws Exception 异常信息
     */
    public Integer queryUserSiteCount(CmsUserSite userSite) throws SQLException {
        return (Integer) sqlMapClient.queryForObject("CMS_USER_SITE.queryUserSiteCount", userSite);
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table CMS_USER_SITE
     *
     * @ibatorgenerated Fri Nov 15 13:56:27 CST 2013
     */
    private static class UpdateByExampleParms extends CmsUserSiteExample {
        private Object record;

        public UpdateByExampleParms(Object record, CmsUserSiteExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    public List selectByUserId(int userid) throws SQLException {
        List list = sqlMapClient.queryForList("CMS_USER_SITE.ByUserIdData", userid);
        return list;
    }

    public SqlMapClient getSqlMapClient() {
        return sqlMapClient;
    }

    public void setSqlMapClient(SqlMapClient sqlMapClient) {
        this.sqlMapClient = sqlMapClient;
    }

}