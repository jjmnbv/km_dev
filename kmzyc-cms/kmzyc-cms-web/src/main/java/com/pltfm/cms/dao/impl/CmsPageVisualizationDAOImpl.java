package com.pltfm.cms.dao.impl;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.pltfm.cms.dao.CmsPageVisualizationDAO;
import com.pltfm.cms.vobject.CmsPageVisualization;
import com.pltfm.cms.vobject.CmsPageVisualizationExample;

import org.springframework.stereotype.Component;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

/**
 * 页面可视化窗口数据绑定DAO实现
 *
 * @author cjm
 * @since 2014-8-21
 */
@Component(value = "cmsPageVisualizationDAO")
public class CmsPageVisualizationDAOImpl implements CmsPageVisualizationDAO {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    @Resource(name = "sqlMapClient")
    private SqlMapClient sqlMapClient;


    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int countByExample(CmsPageVisualizationExample example) throws SQLException {
        Integer count = (Integer) sqlMapClient.queryForObject("CMS_PAGE_VISUALIZATION.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int deleteByExample(CmsPageVisualizationExample example) throws SQLException {
        int rows = sqlMapClient.delete("CMS_PAGE_VISUALIZATION.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int deleteByPrimaryKey(Integer pageVisualizationId) throws SQLException {
        CmsPageVisualization key = new CmsPageVisualization();
        key.setPageVisualizationId(pageVisualizationId);
        int rows = sqlMapClient.delete("CMS_PAGE_VISUALIZATION.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public void insert(CmsPageVisualization record) throws SQLException {
        sqlMapClient.insert("CMS_PAGE_VISUALIZATION.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public void insertSelective(CmsPageVisualization record) throws SQLException {
        sqlMapClient.insert("CMS_PAGE_VISUALIZATION.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public List selectByExample(CmsPageVisualizationExample example) throws SQLException {
        List list = sqlMapClient.queryForList("CMS_PAGE_VISUALIZATION.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public CmsPageVisualization selectByPrimaryKey(Integer pageVisualizationId) throws SQLException {
        CmsPageVisualization key = new CmsPageVisualization();
        key.setPageVisualizationId(pageVisualizationId);
        CmsPageVisualization record = (CmsPageVisualization) sqlMapClient.queryForObject("CMS_PAGE_VISUALIZATION.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int updateByExampleSelective(CmsPageVisualization record, CmsPageVisualizationExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("CMS_PAGE_VISUALIZATION.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int updateByExample(CmsPageVisualization record, CmsPageVisualizationExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("CMS_PAGE_VISUALIZATION.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int updateByPrimaryKeySelective(CmsPageVisualization record) throws SQLException {
        int rows = sqlMapClient.update("CMS_PAGE_VISUALIZATION.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    public int updateByPrimaryKey(CmsPageVisualization record) throws SQLException {
        int rows = sqlMapClient.update("CMS_PAGE_VISUALIZATION.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table CMS_PAGE_VISUALIZATION
     *
     * @ibatorgenerated Thu Aug 21 10:53:06 CST 2014
     */
    private static class UpdateByExampleParms extends CmsPageVisualizationExample {
        private Object record;

        public UpdateByExampleParms(Object record, CmsPageVisualizationExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    /**
     * 页面可视化窗口数据信息总数量
     *
     * @param cmsWindowData 页面可视化窗口信息实体
     * @throws SQLException 异常
     * @return 返回值
     */
    @Override
    public Integer countByCmsPageVisualization(
            CmsPageVisualization cmsPageVisualization) throws SQLException {
        Integer count = (Integer) sqlMapClient.queryForObject(
                "CMS_PAGE_VISUALIZATION.abatorgenerated_countByPageVisualization", cmsPageVisualization);
        return count;
    }

    /**
     * 根据风格Id查询窗口
     */
    @Override
    public List<CmsPageVisualization> queryByStylesId(Integer stylesId)
            throws SQLException {
        CmsPageVisualization key = new CmsPageVisualization();
        key.setStylesId(stylesId);
        return sqlMapClient.queryForList("CMS_PAGE_VISUALIZATION.abatorgenerated_byStylesId", key);
    }

    /**
     * 分页查询页面可视化窗口数据信息
     *
     * @param cmsPageVisualization 页面可视化窗口信息实体
     * @throws SQLException 异常
     * @return 返回值
     */
    @Override
    public List queryForPage(CmsPageVisualization cmsPageVisualization)
            throws SQLException {
        return sqlMapClient.queryForList("CMS_PAGE_VISUALIZATION.abatorgenerated_byPageVisualization", cmsPageVisualization);
    }

    public SqlMapClient getSqlMapClient() {
        return sqlMapClient;
    }

    public void setSqlMapClient(SqlMapClient sqlMapClient) {
        this.sqlMapClient = sqlMapClient;
    }


}