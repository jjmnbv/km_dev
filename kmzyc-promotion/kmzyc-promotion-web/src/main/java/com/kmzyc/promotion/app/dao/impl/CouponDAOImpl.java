package com.kmzyc.promotion.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.CouponDAO;
import com.kmzyc.promotion.app.enums.CouponGrantType;
import com.kmzyc.promotion.app.vobject.Coupon;
import com.kmzyc.promotion.app.vobject.CouponExample;
import com.kmzyc.promotion.app.vobject.CouponGrant;

@Repository("coupondao")
@SuppressWarnings({"unchecked", "unused"})
public class CouponDAOImpl implements CouponDAO {

    public CouponDAOImpl() {

    }

    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Resource
    private SqlMapClient sqlMapClient;


    // 分页查询规则
    @Override
    public List<Coupon> selectByCondition(Coupon coupon) throws SQLException {
        return sqlMapClient.queryForList("COUPON.ibatorgenerated_selectByCondition", coupon);
    }

    // 获取规则总数
    @Override
    public int selectCountByCondition(Coupon coupon) throws SQLException {
        return (Integer) sqlMapClient.queryForObject("COUPON.ibatorgenerated_selectCount", coupon);
    }

    // 添加优惠券规则
    @Override
    public int insertRule(Coupon coupon) throws SQLException {
        return ((Long) sqlMapClient.insert("COUPON.ibatorgeneratedRule_insert", coupon)).intValue();

    }

    // 查询优惠券规则
    @Override
    public Coupon selectCoupon(Coupon coupon) throws SQLException {
        return (Coupon) sqlMapClient.queryForObject("COUPON.ibatorgenerated_selectByCoupon",
                coupon);
    }



    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    public CouponDAOImpl(SqlMapClient sqlMapClient) {
        super();
        this.sqlMapClient = sqlMapClient;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int countByExample(CouponExample example) throws SQLException {
        Integer count = (Integer) sqlMapClient
                .queryForObject("COUPON.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int deleteByExample(CouponExample example) throws SQLException {
        int rows = sqlMapClient.delete("COUPON.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int deleteByPrimaryKey(BigDecimal couponId) throws SQLException {
        Coupon key = new Coupon();
        key.setCouponId(couponId.longValue());
        int rows = sqlMapClient.delete("COUPON.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public void insert(Coupon record) throws SQLException {
        // mkw 20150819 add
        // end
        sqlMapClient.insert("COUPON.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public Integer insertSelective(Coupon record) throws SQLException {
        return ((Long) sqlMapClient.insert("COUPON.ibatorgenerated_insertSelective", record))
                .intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public List selectByExample(CouponExample example) throws SQLException {
        List list = sqlMapClient.queryForList("COUPON.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public Coupon selectByPrimaryKey(Long couponId) throws SQLException {
        Coupon key = new Coupon();
        key.setCouponId(couponId);
        Coupon record = (Coupon) sqlMapClient
                .queryForObject("COUPON.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int updateByExampleSelective(Coupon record, CouponExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("COUPON.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int updateByExample(Coupon record, CouponExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("COUPON.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(Coupon record) throws SQLException {
        int rows =
                sqlMapClient.update("COUPON.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    @Override
    public int updateByPrimaryKey(Coupon record) throws SQLException {
        int rows = sqlMapClient.update("COUPON.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table COUPON
     * 
     * @ibatorgenerated Thu Aug 22 09:31:11 CST 2013
     */
    private static class UpdateByExampleParms extends CouponExample {
        private static final long serialVersionUID = 1L;
        private final Object record;

        public UpdateByExampleParms(Object record, CouponExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    /**
     * 获取栏目信息列表
     * 
     * @param page 分页对象
     * @param sections 栏目信息实体
     * @return 分页栏目列表
     * @throws SQLException SQL异常
     */
    @Override
    public Page selectPageByVo(Page page, Coupon vo) throws SQLException {
        // 用List接收
        List list = sqlMapClient.queryForList("COUPON.ibatorgenerated_selectCount", vo);
        // SysModelUtil countResult = (SysModelUtil) list.get(0);
        // 总条数
        int recs = (Integer) list.get(0);
        int pagecount = 1;
        // 总页数
        if (recs > 1) {
            pagecount = (recs - 1) / page.getPageSize() + 1;
        }
        page.setRecordCount(recs);
        page.setPageCount(pagecount);
        vo.setCouponGivetypeId(null);
        List pageList = sqlMapClient.queryForList("COUPON.ibatorgenerated_selectByCondition", vo);

        page.setDataList(pageList);
        return page;
    }

    /**
     * 已系统时间判定优惠券的有效性，全部注册规则的
     */
    @Override
    public List<Coupon> selectRegistCoupon(Long couponGivetypeId) throws SQLException {
        Coupon coupon = new Coupon();
        coupon.setCouponGivetypeId(couponGivetypeId);
        List<Coupon> couponList = sqlMapClient.queryForList("COUPON.selectValidCoupon", coupon);
        return couponList;
    }

    /**
     * 判断此条优惠券是否过期 true:没过期 false ：过期
     */
    @Override
    public boolean couponIsOutDate(Coupon coupons) throws SQLException {
        Coupon coupon = new Coupon();
        coupon.setCouponId(coupons.getCouponId());
        Coupon conponuse =
                (Coupon) sqlMapClient.queryForObject("COUPON.selectValidCouponById", coupon);
        if (conponuse != null) {
            return true;
        }
        return false;
    }

    /**
     * 已系统时间判定优惠券的有效性，全部订单规则的
     */
    @Override
    public List<Coupon> selectOrderCoupon() throws SQLException {
        Coupon coupon = new Coupon();
        coupon.setCouponGivetypeId(Long.parseLong(CouponGrantType.ORDER_COUPONGRANTTYPE.getType()));
        List<Coupon> couponList = sqlMapClient.queryForList("COUPON.selectValidCoupon", coupon);
        return couponList;
    }

    /**
     * 
     * 根据couponId ,修改couponStatus
     */
    @Override
    public void updateCouponStatus(Coupon coupon) throws SQLException {
        sqlMapClient.update("COUPON.ibatorgenerated_updateCouponStatus", coupon);
    }

    /**
     * 根据couponId,删除一条coupon
     * 
     * @param coupon
     * @throws SQLException
     */
    @Override
    public void delCouponById(Coupon coupon) throws SQLException {
        sqlMapClient.delete("COUPON.deleteCouponById", coupon);
    }

    /**
     * 查找过期的优惠券
     */
    @Override
    public List<Coupon> selectExpiredCoupon() throws SQLException {
        List<Coupon> couponExpiredList = new ArrayList<Coupon>();
        couponExpiredList = sqlMapClient.queryForList("COUPON.selecetExpiredCoupon");
        return couponExpiredList;
    }

    /**
     * 根据传入的订单的SKUCODE，loginID 查询符合条件的优惠券规则
     */
    @Override
    public List<CouponGrant> selectCanUseCoupon(String loginId) throws SQLException {
        Map<String, Object> skuMap = new HashMap<String, Object>();
        skuMap.put("custom_id", loginId);
        List<CouponGrant> couponList =
                sqlMapClient.queryForList("COUPON_GRANT.selectCanUseCoupon", skuMap);
        return couponList;
    }

    /**
     * 
     */
    @Override
    public int updateValide(Coupon coupon) throws SQLException {
        int result = sqlMapClient.update("COUPON.ibatorgenerated_updateCouponValide", coupon);
        return result;
    }

    @Override
    public int activateGiftcoupon(Long couponGrantId, String customerId) throws SQLException {
        Map paramMap = new HashMap();
        paramMap.put("couponGrantId", couponGrantId);
        paramMap.put("customerId", customerId);
        return sqlMapClient.update("COUPON_GRANT.activateGiftcoupon", paramMap);
    }

    @Override
    public BigDecimal getcouponMoneyByCouponId(Long couponId) throws SQLException {
        // TODO Auto-generated method stub
        Object obj = this.getCouponByCouponId(couponId);
        if (null == obj) {
            return BigDecimal.ZERO;
        } else {
            Coupon coupon = (Coupon) obj;
            return coupon.getCouponMoney();
        }
    }

    @Override
    public Coupon getCouponByCouponId(Long couponId) throws SQLException {
        // TODO Auto-generated method stub
        Coupon coupon = new Coupon();
        coupon.setCouponId(couponId);
        return (Coupon) this.sqlMapClient
                .queryForObject("COUPON.ibatorgenerated_selectByPrimaryKey", coupon);
    }


    // 优惠券名称重复问题验证
    @Override
    public List<Coupon> selectCouponName(Map map) throws SQLException {
        return sqlMapClient.queryForList("COUPON.ibatorgenerated_selectCouponName", map);
    }

    // 修改优惠券规则
    @Override
    public int updateCoupon(Coupon coupon) throws SQLException {
        return sqlMapClient.update("COUPON.ibatorgenerated_updateCoupon", coupon);
    }

    // 查询有效优惠券规则
    @Override
    public List<Coupon> selectEffectiveCoupon(Coupon coupon) throws SQLException {
        return sqlMapClient.queryForList("COUPON.ibatorgenerated_selectByCoupon", coupon);
    }

    @Override
    public Coupon selectCouponByPrimaryKey(Long couponId) throws SQLException {
        Coupon key = new Coupon();
        key.setCouponId(couponId);
        Coupon record = (Coupon) sqlMapClient.queryForObject("COUPON.selectCouponOBJ", key);
        return record;
    }

}
