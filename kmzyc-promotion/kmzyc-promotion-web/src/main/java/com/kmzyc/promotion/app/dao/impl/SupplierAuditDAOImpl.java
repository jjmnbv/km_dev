package com.kmzyc.promotion.app.dao.impl;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.SupplierAuditDAO;
import com.kmzyc.supplier.model.AccountInfo;
import com.kmzyc.supplier.model.MerchantInfo;
import com.kmzyc.supplier.model.MerchantInfoOrSuppliers;
import com.kmzyc.supplier.model.User;
import com.kmzyc.supplier.model.example.MerchantInfoExample;

@Repository("supplierAuditDAO")
@SuppressWarnings({"unchecked", "unused"})
public class SupplierAuditDAOImpl extends BaseDao implements SupplierAuditDAO {


    @Resource(name = "sqlMapClient")
    private SqlMapClient sqlMapClient;

    private static final Logger log = LoggerFactory.getLogger(SupplierAuditDAOImpl.class);

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table COMMERCIAL_TENANT_BASIC_INFO
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */

    public SupplierAuditDAOImpl() {}

    // 查询供应商和商户信息
    @Override
    public MerchantInfoOrSuppliers queryBySupplierId(MerchantInfoOrSuppliers record)
            throws SQLException {
        // mkw 20150819 add

        // end
        return (MerchantInfoOrSuppliers) sqlMapClient
                .queryForObject("SUPPLIERAUDIT.ibatorgenerated_selectBySuppOrMer", record);
    };


    @Override
    public int countByExample(MerchantInfoOrSuppliers example) throws SQLException {
        // mkw 20150819 add

        // end
        Integer count = (Integer) sqlMapClient
                .queryForObject("SUPPLIERAUDIT.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    @Override
    public int countCouponByExample(MerchantInfoOrSuppliers example) throws SQLException {
        // mkw 20150819 add

        // end
        Integer count = (Integer) sqlMapClient
                .queryForObject("SUPPLIERAUDIT.ibatorgenerated_countCouponByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int deleteByExample(MerchantInfo example) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        int rows = sqlMapClient.delete("SUPPLIERAUDIT.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int deleteByPrimaryKey(Long merchantId) throws SQLException {
        // mkw 20150819 add

        // end
        MerchantInfo key = new MerchantInfo();
        key.setMerchantId(merchantId);
        int rows = sqlMapClient.delete("SUPPLIERAUDIT.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public void insert(MerchantInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        sqlMapClient.insert("SUPPLIERAUDIT.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public Long insertSelective(MerchantInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        return (Long) sqlMapClient.insert("SUPPLIERAUDIT.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public List selectByExample(MerchantInfoOrSuppliers record, Page page) throws SQLException {
        // mkw 20150819 add

        // end
        List list = sqlMapClient.queryForList("SUPPLIERAUDIT.ibatorgenerated_selectBySuppOrMer",
                record, (page.getPageNo() - 1) * page.getPageSize(), page.getPageSize());
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public MerchantInfo selectByPrimaryKey(Long merchantId) throws SQLException {
        // mkw 20150819 add

        // end
        MerchantInfo key = new MerchantInfo();
        key.setMerchantId(merchantId);
        MerchantInfo record = (MerchantInfo) sqlMapClient
                .queryForObject("SUPPLIERAUDIT.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int updateByExampleSelective(MerchantInfo record, MerchantInfoExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient
                .update("MerchantOrSupplier.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int updateByExample(MerchantInfo record, MerchantInfoExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("MerchantOrSupplier.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(MerchantInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.update("SUPPLIERAUDIT.ibatorgenerated_updateByPrimaryKeySelective",
                record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public int updateByPrimaryKey(MerchantInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        int rows = sqlMapClient.update("SUPPLIERAUDIT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    private static class UpdateByExampleParms extends MerchantInfo {
        private static final long serialVersionUID = 1L;
        private final Object record;

        public UpdateByExampleParms(Object record, MerchantInfoExample example) {
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    /**
     * 根据商户id查询商户信息
     */
    @Override
    public MerchantInfo selectByloginId(MerchantInfo merchant) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        return (MerchantInfo) sqlMapClient.queryForObject("MerchantOrSupplier.selectByloginId",
                merchant);
    }

    /**
     * 根据公司名称查询
     * 
     * @return
     */
    @Override
    public MerchantInfo selectByCompanyName(MerchantInfo merchant) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        return (MerchantInfo) sqlMapClient.queryForObject("MerchantOrSupplier.selectBycorName",
                merchant);

    }

    @Override
    public int updateAccountInfoByLonginId(AccountInfo info) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        return sqlMapClient.update("AccountInfo.updateAccountInfoByLonginId", info);
    }

    @Override
    public int updateUserByLonginId(User user) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.update("User.updateUserByLonginId", user);
    }

    @Override
    public User selectUserByUserName(String userName) throws SQLException {
        // mkw 20150819 add

        // end
        User user = new User();
        user.setLoginAccount(userName);
        return (User) sqlMapClient.queryForObject("User.queryUserByUserName", user);
    }

    @Override
    public MerchantInfo selectByUserLoginId(MerchantInfo merchant) throws SQLException {
        // mkw 20150819 add

        // end
        return (MerchantInfo) sqlMapClient.queryForObject("SUPPLIERAUDIT.selectByloginId",
                merchant);
    }

    /**
     * 查询供应商和商户的信息
     * 
     * @return
     * @throws SQLException
     */
    @Override
    public List<MerchantInfoOrSuppliers> selectSupplierIdAndMerchantName(
            MerchantInfoOrSuppliers record) throws SQLException {
        // mkw 20150819 add

        // end
        List<MerchantInfoOrSuppliers> list = sqlMapClient
                .queryForList("SUPPLIERAUDIT.ibatorgenerated_selectBySuppOrMer", record);
        return list;
    }

    @Override
    public List<MerchantInfoOrSuppliers> selectPageSupplierIdAndMerchantName(
            MerchantInfoOrSuppliers record) {
        try {
            // mkw 20150819 add

            // end
            return sqlMapClient.queryForList("SUPPLIERAUDIT.ibatorgenerated_selectPageBySuppOrMer",
                    record);
        } catch (SQLException e) {
            log.error("selectPageSupplierIdAndMerchantName方法sql异常：", e);
            return null;
        }
    }

    @Override
    public Integer selectCountSupplierIdAndMerchantName(MerchantInfoOrSuppliers record) {
        try {
            // mkw 20150819 add

            // end
            return (Integer) sqlMapClient.queryForObject(
                    "SUPPLIERAUDIT.ibatorgenerated_selectPageCountBySuppOrMer", record);
        } catch (SQLException e) {
            log.error("selectCountSupplierIdAndMerchantName方法sql异常：", e);
            return null;
        }

    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERAUDIT
     * 
     * @ibatorgenerated Wed Dec 25 11:00:38 CST 2013
     */
    @Override
    public List selectCouponSupplierByExample(MerchantInfoOrSuppliers record, Page page)
            throws SQLException {
        // mkw 20150819 add

        // end
        List list =
                sqlMapClient.queryForList("SUPPLIERAUDIT.ibatorgenerated_selectCouponBySuppOrMer",
                        record, (page.getPageNo() - 1) * page.getPageSize(), page.getPageSize());
        return list;
    }
}
