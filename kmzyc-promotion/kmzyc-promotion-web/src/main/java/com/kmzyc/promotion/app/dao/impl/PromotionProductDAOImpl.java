package com.kmzyc.promotion.app.dao.impl;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import com.google.common.collect.Maps;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.km.framework.page.Pagination;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.PromotionProductDAO;
import com.kmzyc.promotion.app.vobject.ProductAndSku;
import com.kmzyc.promotion.app.vobject.ProductSku;
import com.kmzyc.promotion.app.vobject.ProductStock;
import com.kmzyc.promotion.app.vobject.PromotionInfo;
import com.kmzyc.promotion.app.vobject.PromotionProduct;
import com.kmzyc.promotion.app.vobject.PromotionProductExample;
import com.kmzyc.promotion.optimization.model.RestrictionProduct;
import com.kmzyc.promotion.sys.util.RedisCacheUtil;

import redis.clients.jedis.JedisCluster;

@Repository("promotionProductDAO")
@SuppressWarnings({"unchecked", "unused"})
public class PromotionProductDAOImpl extends BaseDao implements PromotionProductDAO {
    private final static Logger myLogger = LoggerFactory.getLogger(PromotionProductDAOImpl.class);

    @Resource
    private JedisCluster jedisCluster;

    @Resource
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int countByExample(PromotionProductExample example) throws SQLException {

        Integer count = (Integer) sqlMapClient
                .queryForObject("PROMOTION_PRODUCT.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int deleteByExample(PromotionProductExample example) throws SQLException {

        int rows =
                sqlMapClient.delete("PROMOTION_PRODUCT.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int deleteByPrimaryKey(Long promotionProductId) throws SQLException {
        PromotionProduct key = new PromotionProduct();
        key.setPromotionProductId(promotionProductId);

        int rows = sqlMapClient.delete("PROMOTION_PRODUCT.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public void insert(PromotionProduct record) throws SQLException {

        sqlMapClient.insert("PROMOTION_PRODUCT.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public void insertSelective(PromotionProduct record) throws SQLException {

        sqlMapClient.insert("PROMOTION_PRODUCT.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public PromotionProduct selectByPrimaryKey(Long promotionProductId) throws SQLException {
        PromotionProduct key = new PromotionProduct();
        key.setPromotionProductId(promotionProductId);

        PromotionProduct record = (PromotionProduct) sqlMapClient
                .queryForObject("PROMOTION_PRODUCT.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int updateByExampleSelective(PromotionProduct record, PromotionProductExample example)
            throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);

        int rows = sqlMapClient.update("PROMOTION_PRODUCT.ibatorgenerated_updateByExampleSelective",
                parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int updateByExample(PromotionProduct record, PromotionProductExample example)
            throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);

        int rows = sqlMapClient.update("PROMOTION_PRODUCT.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(PromotionProduct record) throws SQLException {

        int rows = sqlMapClient
                .update("PROMOTION_PRODUCT.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    @Override
    public int updateByPrimaryKey(PromotionProduct record) throws SQLException {

        int rows =
                sqlMapClient.update("PROMOTION_PRODUCT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * 获取活动产品信息列表
     * 
     * @param page 分页对象
     * @param vo 活动产品信息实体
     * @return 分页信息列表
     * @throws Exception 异常
     */
    @Override
    public Page selectPageByVo(Page page, PromotionProduct vo) throws SQLException {
        // 总条数
        int recs = selectCountByVo(vo);
        if (recs % page.getPageSize() == 0 && page.getPageSize() * page.getPageNo() > recs) {
            page.setPageNo(page.getPageNo() - 1);

        }
        if (page.getPageSize() * (page.getPageNo() - 1) > recs) {
            page.setPageNo(1);
            vo.setSkip(1);
            vo.setMax(page.getPageSize());
        }

        int pageIndex = page.getPageNo();
        if (pageIndex == 0)
            pageIndex = 1;
        int pageSize = page.getPageSize();
        int skip = (pageIndex - 1) * pageSize + 1;
        int max = pageSize * pageIndex;
        vo.setSkip(skip);
        vo.setMax(max);

        List pageList = sqlMapClient.queryForList("PROMOTION_PRODUCT.searchPageByVo", vo);
        page.setRecordCount(recs);
        page.setDataList(pageList);
        return page;
    }

    @Override
    public Integer selectCountByVo(PromotionProduct vo) throws SQLException {

        Object count =
                sqlMapClient.queryForObject("PROMOTION_PRODUCT.getPromotionProductCount", vo);
        return (Integer) count;
    }

    /** 查询特价活动商品价格小于等于0的商品数量 */
    @Override
    public Integer selectPriceIsIllegalityCount(Long promotionProductId) throws SQLException {

        Object count = sqlMapClient.queryForObject("PROMOTION_PRODUCT.selectPriceIsIllegalityCount",
                promotionProductId);
        return (Integer) count;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    private static class UpdateByExampleParms extends PromotionProductExample {
        private final Object record;

        public UpdateByExampleParms(Object record, PromotionProductExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    @Override
    public Pagination getPromotionProduct(Pagination page, PromotionInfo promotion)
            throws Exception {
        // {1:'全场',2:'指定商品',3:'商品类目',4:'商品品牌',5:'指定商家'}
        Integer selectProductType = promotion.getProductFilterType();
        Map<String, String> conditionMap = new HashMap<String, String>();
        String sql = "PROMOTION_PRODUCT.getProductInfo";
        String countSql = "PROMOTION_PRODUCT.getProductInfoCount";
        String promotionSelectSql =
                promotion.getProductFilterSql() == null ? "" : promotion.getProductFilterSql();
        int start = 0, end = promotionSelectSql.length();
        if (promotionSelectSql.startsWith(",")) {
            start = start + 1;
        }
        if (promotionSelectSql.endsWith(",")) {
            end = end - 1;
        }
        conditionMap.put("promotionId", promotion.getPromotionId().toString());
        int shopSort = promotion.getShopSort().intValue();
        if (shopSort == 2) {
            conditionMap.put("shopCodes", promotion.getSupplierId().toString());
        } else if (shopSort == 3) {
            // 康美自营代销
            conditionMap.put("shopCodes", "1");
            sql = "PROMOTION_PRODUCT.getProductInfoA";
            countSql = "PROMOTION_PRODUCT.getProductInfoCountA";
        } else {
            conditionMap.put("shopCodes", "");
        }
        // {1:'全场',2:'指定商品',3:'商品类目',4:'商品品牌'}
        switch (selectProductType.intValue()) {
            case 1:
                break;
            case 2:
                sql = "PROMOTION_PRODUCT.getProductSkuIdBySku";
                countSql = "PROMOTION_PRODUCT.getProductSkuIdBySkuCount";
                break;
            case 3:
                conditionMap.put("categoryIds", promotionSelectSql.substring(start, end));
                break;
            case 4:
                conditionMap.put("brandIds", promotionSelectSql.substring(start, end));
                break;
            default:
                break;
        }
        page.setObjCondition(conditionMap);

        page = super.queryPagination(sql, countSql, page);
        return page;
    }

    @Override
    public Pagination getPromotionProductAndSku(Pagination page, PromotionInfo promotion)
            throws Exception {
        // return null;
        // {1:'全场',2:'指定商品',3:'商品类目',4:'商品品牌',5:'指定商家'}
        Integer selectProductType = promotion.getProductFilterType();
        Map<String, String> conditionMap = new HashMap<String, String>();
        String sql = "";
        String countSql = "";
        sql = "PROMOTION_PRODUCT.getProductInfo";
        countSql = "PROMOTION_PRODUCT.getProductInfoCount";
        String promotionSelectSql =
                promotion.getProductFilterSql() == null ? "" : promotion.getProductFilterSql();
        int start = 0, end = promotionSelectSql.length();
        if (promotionSelectSql.startsWith(",")) {
            start = start + 1;
        }
        if (promotionSelectSql.endsWith(",")) {
            end = end - 1;
        }
        conditionMap.put("promotionId", promotion.getPromotionId().toString());
        int shopSort = promotion.getShopSort().intValue();
        if (shopSort == 2) {
            conditionMap.put("shopCodes", promotion.getSupplierId().toString());
        } else if (shopSort == 3) {
            // 康美自营代销
            conditionMap.put("shopCodes", "1");
            sql = "PROMOTION_PRODUCT.getProductInfoA";
            countSql = "PROMOTION_PRODUCT.getProductInfoCountA";
        } else {
            conditionMap.put("shopCodes", "");
        }
        // {1:'全场',2:'指定商品',3:'商品类目',4:'商品品牌'}
        switch (selectProductType.intValue()) {
            case 1:
                break;
            case 2:
                sql = "PROMOTION_PRODUCT.getProductSkuIdBySku";
                countSql = "PROMOTION_PRODUCT.getProductSkuIdBySkuCount";
                break;
            case 3:
                conditionMap.put("categoryIds", promotionSelectSql.substring(start, end));
                break;
            case 4:
                conditionMap.put("brandIds", promotionSelectSql.substring(start, end));
                break;
            default:
                break;
        }
        page.setObjCondition(conditionMap);
        // this.

        page = super.queryPagination(sql, countSql, page);
        return page;
    }

    @Override
    public void copyPromotionProduct(Long newPromotionId, Long oldPromotionId) throws SQLException {
        Map<String, Long> map = new HashMap<String, Long>();
        map.put("newPromotionId", newPromotionId);
        map.put("oldPromotionId", oldPromotionId);

        sqlMapClient.insert("PROMOTION_PRODUCT.copyPromotionProduct", map);// 复制活动产品数据表
        sqlMapClient.insert("PROMOTION_RULE_DATA.copyPromotionRuleData", map);// 复制活动规则数据表
    }

    @Override
    public List<ProductStock> batchUpdatePromotionSell(List<ProductStock> stockList, String sqlId) {

        return super.myPatchUpdate(stockList, sqlId);
    }

    @Override
    public PromotionProduct getPromotionProductPrice(Long productSkuId, Long promotionId)
            throws SQLException {
        PromotionProduct pp = null;
        try {
            pp = RedisCacheUtil.getPromotionProductCache(jedisCluster, promotionId, productSkuId);
            if (null == pp) {
                Map<String, Long> map = new HashMap<String, Long>();
                map.put("productSkuId", productSkuId);
                map.put("promotionId", promotionId);

                pp = (PromotionProduct) sqlMapClient
                        .queryForObject("PROMOTION_PRODUCT.findPromotionProduct", map);
                if (null != pp) {
                    RedisCacheUtil.createPromotionProductCache(jedisCluster, pp);
                } else {
                    RedisCacheUtil.createPromotionProductCacheForNull(jedisCluster, productSkuId,
                            promotionId);
                }
            }
        } catch (Exception e) {
            logger.error("获取活动产品缓存发生异常", e);
        }
        return pp;
    }

    /**
     * 批量查询加价购、赠品价格
     * 
     * @param type5加价购3满赠null全部类型
     * @param ids活动ID
     * @return
     * @throws SQLException
     */
    @Override
    public Map<Long, List<PromotionProduct>> queryBatchGiftProductPrice(Integer type,
            List<Long> ids) throws SQLException {
        if (null == ids || ids.isEmpty()) {
            return null;
        }
        Map<Long, List<PromotionProduct>> map = null;
        try {
            map = RedisCacheUtil.getPromotionRuleProductCache(jedisCluster, ids);
            boolean hasUnCreated = false;
            if (null != map && !map.isEmpty()) {
                ids.clear();
                List<PromotionProduct> temp = null;
                for (Long pid : map.keySet()) {
                    temp = map.get(pid);
                    if (temp == null || temp.isEmpty()) {
                        ids.add(pid);
                        hasUnCreated = true;
                    }
                }
            }
            if (null == map) {
                map = new HashMap<Long, List<PromotionProduct>>();
            }
            if (null != ids && !ids.isEmpty()) {
                if (map.isEmpty() || hasUnCreated) {
                    Map<String, Object> params = new HashMap<String, Object>();
                    params.put("type", type);
                    params.put("pids", ids);

                    List<PromotionProduct> plist = sqlMapClient.queryForList(
                            "PROMOTION_PRODUCT.SQL_QUERY_BATCH_GIFT_PRODUCT_PRICE", params);
                    if (null != plist && !plist.isEmpty()) {
                        List<PromotionProduct> ppList = null;
                        for (PromotionProduct pp : plist) {
                            Long promotionId = pp.getPromotionId();
                            ppList = map.get(promotionId);
                            if (null == ppList) {
                                ppList = new ArrayList<PromotionProduct>();
                            }
                            ppList.add(pp);
                            map.put(promotionId, ppList);
                        }
                        PromotionInfo info = new PromotionInfo();
                        for (Long pid : map.keySet()) {
                            info.setPromotionId(pid);
                            RedisCacheUtil.createPromotionRuleProductCache(jedisCluster, info,
                                    map.get(pid));
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error("获取产品是否参加活动缓存", e);
        }
        return map;
    }

    @Override
    public List<ProductSku> getPromotionProductsByInfo(String sql, Pagination page)
            throws SQLException {

        return sqlMapClient.queryForList(sql, page);

    }

    @Override
    public List<ProductAndSku> queryProductByPromotionInfo(String sql, Pagination page) {
        List<ProductAndSku> recordList = null;
        try {
            pageInitData(page);

            recordList = sqlMapClient.queryForList(sql, page);
        } catch (Exception e) {
            logger.error("分页查询活动下的商品异常", e);
            myLogger.error("分页查询活动下的商品异常,sql={}", sql, e);
        }
        return recordList;
    }

    private void pageInitData(Pagination page) {
        page.setStartindex((page.getPage() - 1) * page.getNumperpage() + 1);
        page.setEndindex(page.getPage() * page.getNumperpage());
    }

    @Override
    public Map<String, Double> queryProductSkuIdMapByPromotionInfo(String sql, Pagination page) {
        Map<String, Double> recordObject = null;
        try {
            pageInitData(page);

            recordObject = sqlMapClient.queryForMap(sql, page, "PRODUCTSKUIDVALUE", "PRODUCTSKUID");
        } catch (Exception e) {
            logger.error("分页查询活动下的商品异常", e);
            myLogger.error("分页查询活动下的商品异常,sql={}", sql, e);
        }
        return recordObject;
    }



    @Override
    public List<ProductAndSku> queryProductAndSkuForBatch(Collection<?> skuIds, Long promotionId) {
        try {
            Map<String, Object> map = Maps.newHashMap();
            map.put("skuIds", skuIds.toArray(new String[skuIds.size()]));
            if (promotionId != null) {
                map.put("promotionId", promotionId);
            }

            return sqlMapClient.queryForList("promotion_optimization.getProductAndSkuBySku", map);
        } catch (SQLException e) {
            logger.error("queryProductAndSkuForBatch异常", e);
        }
        return null;
    }

    @Override
    public String selectInPruductSkuIds(Long promotionId) throws SQLException {

        return (String) sqlMapClient.queryForObject("PROMOTION_PRODUCT.selectInPruductSkuIds",
                Integer.valueOf(promotionId.toString()));
    }

    @Override
    public String selectExceptionPruductSkuIds(Long promotionId) throws SQLException {

        return (String) sqlMapClient.queryForObject(
                "PROMOTION_PRODUCT.selectExceptionPruductSkuIds",
                Integer.valueOf(promotionId.toString()));
    }

    @Override
    public RestrictionProduct queryRestrictionProduct(Long skuId, Long promotionId)
            throws SQLException {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("skuId", skuId);
        map.put("promotionId", promotionId);

        return (RestrictionProduct) sqlMapClient
                .queryForObject("PROMOTION_PRODUCT.queryRestrictionProduct", map);
    }

    @Override
    public List<PromotionProduct> queryListByPromotionId(Long newId) throws SQLException {
        List<PromotionProduct> list =
                sqlMapClient.queryForList("PROMOTION_PRODUCT.selectByPromotionId", newId);
        return list;
    }



}
