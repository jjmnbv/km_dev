package com.kmzyc.promotion.app.dao.impl;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.ProductSkuDAO;
import com.kmzyc.promotion.app.vobject.CarryStockOutDetailVO;
import com.kmzyc.promotion.app.vobject.ProductAndSku;
import com.kmzyc.promotion.app.vobject.ProductPrice;
import com.kmzyc.promotion.app.vobject.ProductSku;
import com.kmzyc.promotion.app.vobject.ProductSkuExample;
import com.kmzyc.promotion.sys.model.SysModelUtil;

@Repository("productSkuDAO")
@SuppressWarnings({"unchecked", "unused"})
public class ProductSkuDAOImpl extends BaseDao<ProductSku> implements ProductSkuDAO {
    private static final Logger logger = LoggerFactory.getLogger(ProductSkuDAOImpl.class);
    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Resource
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int countByExample(ProductSkuExample example) throws SQLException {
        // mkw 20150819 add

        // end
        Integer count = (Integer) sqlMapClient
                .queryForObject("PRODUCT_SKU.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int deleteByExample(ProductSkuExample example) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.delete("PRODUCT_SKU.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int deleteByPrimaryKey(Long productSkuId) throws SQLException {
        // mkw 20150819 add

        // end
        ProductSku key = new ProductSku();
        key.setProductSkuId(productSkuId);
        int rows = sqlMapClient.delete("PRODUCT_SKU.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public void insert(ProductSku record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("PRODUCT_SKU.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public void insertSelective(ProductSku record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("PRODUCT_SKU.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public List selectByExample(ProductSkuExample example) throws SQLException {
        // mkw 20150819 add

        // end
        List list =
                sqlMapClient.queryForList("PRODUCT_SKU.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public ProductSku selectByPrimaryKey(Long productSkuId) throws SQLException {
        // mkw 20150819 add

        // end
        ProductSku key = new ProductSku();
        key.setProductSkuId(productSkuId);
        ProductSku record = (ProductSku) sqlMapClient
                .queryForObject("PRODUCT_SKU.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int updateByExampleSelective(ProductSku record, ProductSkuExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows =
                sqlMapClient.update("PRODUCT_SKU.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int updateByExample(ProductSku record, ProductSkuExample example) throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("PRODUCT_SKU.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(ProductSku record) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        int rows = sqlMapClient.update("PRODUCT_SKU.ibatorgenerated_updateByPrimaryKeySelective",
                record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    @Override
    public int updateByPrimaryKey(ProductSku record) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL不存在
        int rows = sqlMapClient.update("PRODUCT_SKU.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table PRODUCT_SKU
     * 
     * @ibatorgenerated Thu Aug 01 14:41:16 CST 2013
     */
    private static class UpdateByExampleParms extends ProductSkuExample {
        private final Object record;

        public UpdateByExampleParms(Object record, ProductSkuExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    /**
     * 根据SKU，查找商品信息
     */
    @Override
    public Map<Long, ProductAndSku> findProduct(String productSkuCode) {
        try {
            // mkw 20150819 add

            // end
            // 返回以productId为key的map集合对象
            return sqlMapClient.queryForMap("PRODUCT_SKU.findProductInfoBySkuCode", productSkuCode,
                    "productId");
        } catch (SQLException e) {
            logger.error("根据SKU，查找商品信息sql异常：", e);
        }
        return null;
    }

    /**
     * 查找商品信息,全部
     */
    @Override
    public Map<Long, ProductAndSku> findAllProducts(List<String> codesList) {
        try {
            // mkw 20150819 add

            // end
            // 返回以productId为key的map集合对象
            return sqlMapClient.queryForMap("PRODUCT_SKU.findProductInfos", codesList, "productId");
        } catch (SQLException e) {
            logger.error("查找商品信息,全部sql异常：", e);
        }
        return null;
    }

    /**
     * 根据SKU，查找商品信息
     */
    @Override
    public ProductAndSku findProductBySkuCode(String productSkuCode) {
        try {
            // mkw 20150819 add

            // end
            return (ProductAndSku) sqlMapClient
                    .queryForObject("PRODUCT_SKU.findProductInfoBySkuCode", productSkuCode);
        } catch (SQLException e) {
            logger.error("根据SKU，查找商品信息sql异常：", e);
        }
        return null;
    }

    /**
     * 根据SkuCode，查找商品信息集合
     */
    @Override
    public List<ProductAndSku> findProductsBySkuCodeList(
            List<CarryStockOutDetailVO> productSkuCodeList) {
        try {
            // mkw 20150819 add

            // end
            return sqlMapClient.queryForList("PRODUCT_SKU.findProductListBySkuCodeList",
                    productSkuCodeList);
        } catch (SQLException e) {
            logger.error("根据SkuCode，查找商品信息集合异常：", e);
            return null;
        }
    }

    /**
     * 根据SKU，查找商品信息
     */
    @Override
    public ProductAndSku findProduct(Long productSkuId) {

        try {
            // 返回productSKU
            return (ProductAndSku) sqlMapClient.queryForObject("PRODUCT_SKU.findProductInfoBySkuId",
                    productSkuId);
        } catch (SQLException e) {
            logger.error("根据SKU，查找商品信息异常：", e);
        }
        return null;
    }

    /**
     * 获取产品SKU信息列表
     * 
     * @param page 分页对象
     * @param vo 产品SKU信息实体
     * @return 分页信息列表
     * @throws Exception 异常
     */
    @Override
    public Page selectPageByVo(Page page, ProductSku vo) throws SQLException {
        // mkw 20150819 add

        // end
        // 用List接收
        List list = sqlMapClient.queryForList("PRODUCT_SKU.getProducSkuCount", vo);

        SysModelUtil countResult = (SysModelUtil) list.get(0);
        // 总条数
        int recs = countResult.getTheCount().intValue();
        if ((recs % page.getPageSize() == 0 && page.getPageSize() * page.getPageNo() > recs)
                || page.getPageSize() * (page.getPageNo() - 1) > recs) {
            page.setPageNo(1);
            vo.setSkip(1);
            vo.setMax(page.getPageSize());
        }
        int pagecount = 1;
        // 总页数
        if (recs > 1) {
            pagecount = (recs - 1) / page.getPageSize() + 1;
        }
        page.setRecordCount(recs);
        page.setPageCount(pagecount);

        List pageList = sqlMapClient.queryForList("PRODUCT_SKU.searchPageByVo", vo);

        page.setDataList(pageList);
        return page;
    }

    @Override
    public void updateBatch(List<ProductSku> productSkus) throws SQLException {
        // mkw 20150819 add

        // end
        super.batchUpdateData("PRODUCT_SKU.updatePriceByPrimaryKey", productSkus);
    }

    @Override
    public String findMaxSkuCodeByCateCode(String cateCode) throws SQLException {
        // mkw 20150819 add

        // end
        Object obj = sqlMapClient.queryForObject("PRODUCT_SKU.findMaxSkuCodeByCateCode", cateCode);
        return obj == null ? null : obj.toString();
    }

    @Override
    public int updateSkuByProductSkuIdBatch(List list) throws SQLException {
        // mkw 20150819 add

        // end
        return super.batchUpdateDataNotGen("PRODUCT_SKU.updateSkuStatus", list);
    }

    @Override
    public List<String> selectSkuCodeListByCategoryBrandBySkucode(ProductSku skuCode)
            throws Exception {
        // mkw 20150819 add

        // end
        List<String> list = new ArrayList<String>();
        list = sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuListBySameBrandCategory",
                skuCode);
        return list;
    }

    @Override
    public List<String> selectSkuCodeListByCategory(ProductSku sku) throws Exception {
        // mkw 20150819 add

        // end
        List<String> list = new ArrayList<String>();
        list = sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuListSameCategory", sku);
        return list;

    }

    @Override
    public List<String> selectSkuCodeListByPriceStatus(Map map) throws Exception {
        // mkw 20150819 add

        // end
        List<String> list = new ArrayList<String>();
        list = sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuListSamePriceStatus", map);
        return list;

    }

    @Override
    public ProductSku selectProductSkuBySkucode(ProductSku sku) throws Exception {
        // mkw 20150819 add

        // end
        return (ProductSku) sqlMapClient.queryForObject("PRODUCT_SKU.selectSkuBySkuCode", sku);
    }

    @Override
    public void updateUnitWeightByPrimaryKey(List<ProductSku> productSkus) throws Exception {
        // mkw 20150819 add

        // end
        super.batchUpdateData("PRODUCT_SKU.updateWeightByPrimaryKey", productSkus);
    }

    @Override
    public List<String> selectSkuCodeByManyCategory(List<Long> categoryIdList) throws Exception {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuByManyCategory",
                categoryIdList);
    }

    @Override
    public List<Long> selectSkuIdByManyCategory(List<Long> categoryIdList) throws Exception {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuIdByManyCategory",
                categoryIdList);

    }

    @Override
    public List<Long> selectSkuIdsByProductIdList(List<Long> productIdList) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.selectSkuIdsByProductIdList", productIdList);
    }

    @Override
    public List<String> selectSkuCodeByManySkuId(List<Long> skuIdList) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU_ATTR.selectSkuCodeByManySkuId", skuIdList);
    }

    @Override
    public Long selectSkuIdBySkuCode(String skuCode) throws SQLException {
        // mkw 20150819 add

        // end
        return (Long) sqlMapClient.queryForObject("PRODUCT_SKU_ATTR.selectSkuIdBySkuCode", skuCode);

    }

    @Override
    public List<ProductSku> selectByExample(ProductSkuExample example, int pageNo, int pageSize)
            throws SQLException {

        // mkw 20150819 add

        // end
        List<ProductSku> skuList =
                sqlMapClient.queryForList("PRODUCT_SKU.ibatorgenerated_selectByExample", example,
                        (pageNo - 1) * pageSize, pageSize);
        return skuList;
    }

    @Override
    public Map<Long, ProductSku> getSkuIdAndCodeMap(List<Long> skuIdList) throws Exception {
        // mkw 20150819 add

        // end
        Map<Long, ProductSku> skuIdAndCodeMap = sqlMapClient
                .queryForMap("PRODUCT_SKU.getSkuIdAndCodeMap", skuIdList, "productSkuId");
        return skuIdAndCodeMap;
    }

    @Override
    public List<ProductSku> findProductSkuBySkuCodes(List<String> productSkuCodeList)
            throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.findProductSkuBySkuCodes",
                productSkuCodeList);
    }

    /**
     * 批量查询产品价格
     * 
     * @param skudIds
     * @return
     * @throws SQLException
     */
    @Override
    public List<ProductPrice> queryBatchPrice(List<Long> skuIds) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.SQL_QUERY_BATCH_PRICE", skuIds);
    }

    /**
     * 获取产品价格
     * 
     * @param sku
     * @return
     * @throws SQLException
     */
    @Override
    public ProductPrice getProductPriceByArea(Map<String, Long> params) throws SQLException {
        // mkw 20150819 add

        // end
        return (ProductPrice) sqlMapClient
                .queryForObject("PRODUCT_SKU.SQL_QUERY_PRODUCT_PRICE_BY_AREA", params);
    }

    /**
     * 获取产品全国价
     * 
     * @param skuId
     * @return
     * @throws SQLException
     */
    @Override
    public ProductPrice getProductBasicPrice(Long skuId) throws SQLException {
        // mkw 20150819 add

        // end
        return (ProductPrice) sqlMapClient
                .queryForObject("PRODUCT_SKU.SQL_QUERY_PRODUCT_BASIC_PRICE", skuId);
    }

    /**
     * 批量获取产品价格
     * 
     * @param params
     * @return
     * @throws SQLException
     */
    @Override
    public List<ProductPrice> queryBatchProductPrice(Map<String, Object> params)
            throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.SQL_QUERY_BATCH_PRODUCT_PRICE", params);
    }

    /**
     * 批量获取产品全国价
     * 
     * @param skuIds
     * @return
     * @throws SQLException
     */
    @Override
    public List<ProductPrice> queryBatchProductBasicPrice(List<Long> skuIds) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.SQL_QUERY_BATCH_PRODUCT_BASIC_PRICE", skuIds);
    }

    /**
     * 批量查询ProductSku
     * 
     * @param skuIds
     * @return
     * @throws SQLException
     */
    @Override
    public List<ProductSku> queryProductSkuForBatch(List<Long> skuIds) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.SQL_QUERY_BATCH_PRODUCT_SKU", skuIds);
    }

    /**
     * 批量查询ProductAndSku
     * 
     * @param skuIds
     * @return
     * @throws SQLException
     */
    @Override
    public List<ProductAndSku> queryProductAndSkuForBatch(List<Long> skuIds) throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("PRODUCT_SKU.SQL_QUERY_BATCH_PRODUCT_AND_SKU", skuIds);
    }

    @Override
    public Page selecPresellProductByVo(Page page, ProductSku vo) throws SQLException {
        List<SysModelUtil> list =
                sqlMapClient.queryForList("PRODUCT_SKU.selecPresellProductByVoCount", vo);

        SysModelUtil countResult = list.get(0);
        // 总条数
        int recs = countResult.getTheCount().intValue();
        if ((recs % page.getPageSize() == 0 && page.getPageSize() * page.getPageNo() > recs)
                || page.getPageSize() * (page.getPageNo() - 1) > recs) {
            page.setPageNo(1);
            vo.setSkip(1);
            vo.setMax(page.getPageSize());
        }
        int pagecount = 1;
        // 总页数
        if (recs > 1) {
            pagecount = (recs - 1) / page.getPageSize() + 1;
        }
        page.setRecordCount(recs);
        page.setPageCount(pagecount);

        List<ProductSku> pageList =
                sqlMapClient.queryForList("PRODUCT_SKU.selectPresellProductByVo", vo);

        page.setDataList(pageList);
        return page;
    }
}
