package com.kmzyc.promotion.app.dao;

import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.km.framework.page.Pagination;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.vobject.ProductAndSku;
import com.kmzyc.promotion.app.vobject.ProductSku;
import com.kmzyc.promotion.app.vobject.ProductStock;
import com.kmzyc.promotion.app.vobject.PromotionInfo;
import com.kmzyc.promotion.app.vobject.PromotionProduct;
import com.kmzyc.promotion.app.vobject.PromotionProductExample;
import com.kmzyc.promotion.optimization.model.RestrictionProduct;

public interface PromotionProductDAO {
    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int countByExample(PromotionProductExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int deleteByExample(PromotionProductExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int deleteByPrimaryKey(Long promotionProductId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    void insert(PromotionProduct record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    void insertSelective(PromotionProduct record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    PromotionProduct selectByPrimaryKey(Long promotionProductId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int updateByExampleSelective(PromotionProduct record, PromotionProductExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int updateByExample(PromotionProduct record, PromotionProductExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int updateByPrimaryKeySelective(PromotionProduct record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PROMOTION_PRODUCT
     * 
     * @ibatorgenerated Mon Aug 26 10:36:32 CST 2013
     */
    int updateByPrimaryKey(PromotionProduct record) throws SQLException;

    /**
     * 获取活动产品信息列表
     * 
     * @param page 分页对象
     * @param vo 活动产品信息实体
     * @return 分页信息列表
     * @throws Exception 异常
     */
    public Page selectPageByVo(Page page, PromotionProduct vo) throws SQLException;

    /**
     * 获取查询数量
     * 
     * @param vo
     * @return
     * @throws SQLException
     */
    public Integer selectCountByVo(PromotionProduct vo) throws SQLException;

    public Pagination getPromotionProduct(Pagination page, PromotionInfo promotion)
            throws Exception;

    public void copyPromotionProduct(Long newPromotionId, Long oldPromotionId) throws SQLException;

    public Integer selectPriceIsIllegalityCount(Long promotionProductId) throws SQLException;

    /** 更新活动订购数量 */
    public List<ProductStock> batchUpdatePromotionSell(List<ProductStock> stockList, String sqlId);

    PromotionProduct getPromotionProductPrice(Long skuId, Long promotionId) throws SQLException;

    /**
     * 批量查询加价购、赠品价格
     * 
     * @param type5加价购3满赠
     * @param ids活动ID
     * @return
     * @throws SQLException
     */
    public Map<Long, List<PromotionProduct>> queryBatchGiftProductPrice(Integer type,
            List<Long> ids) throws SQLException;

    Pagination getPromotionProductAndSku(Pagination page, PromotionInfo info) throws Exception;

    List<ProductSku> getPromotionProductsByInfo(String sql, Pagination page) throws SQLException;

    List<ProductAndSku> queryProductByPromotionInfo(String sql, Pagination page);

    Map<String, Double> queryProductSkuIdMapByPromotionInfo(String sql, Pagination page);

    public List<ProductAndSku> queryProductAndSkuForBatch(Collection<?> skuIds, Long promotionId);

    String selectInPruductSkuIds(Long promotionProductId) throws SQLException;

    String selectExceptionPruductSkuIds(Long promotionProductId) throws SQLException;

    RestrictionProduct queryRestrictionProduct(Long skuId, Long promotionId) throws SQLException;

    // 根据活动id查询活动商品列表
    List<PromotionProduct> queryListByPromotionId(Long newId) throws SQLException;


}
