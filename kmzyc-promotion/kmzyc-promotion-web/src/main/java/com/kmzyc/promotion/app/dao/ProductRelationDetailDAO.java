package com.kmzyc.promotion.app.dao;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.vobject.ProductRelationDetail;
import com.kmzyc.promotion.app.vobject.ProductRelationDetailExample;

@SuppressWarnings("unchecked")
public interface ProductRelationDetailDAO {
    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int countByExample(ProductRelationDetailExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int deleteByExample(ProductRelationDetailExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int deleteByPrimaryKey(Long relationDetailId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    void insert(ProductRelationDetail record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    void insertSelective(ProductRelationDetail record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    List selectByExample(ProductRelationDetailExample example) throws SQLException;

    List selectByExample(ProductRelationDetailExample example, Page page) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    ProductRelationDetail selectByPrimaryKey(Long relationDetailId) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int updateByExampleSelective(ProductRelationDetail record, ProductRelationDetailExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int updateByExample(ProductRelationDetail record, ProductRelationDetailExample example)
            throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int updateByPrimaryKeySelective(ProductRelationDetail record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table PRODUCT_RELATION_DETAIL
     * 
     * @ibatorgenerated Sat Oct 12 17:16:34 CST 2013
     */
    int updateByPrimaryKey(ProductRelationDetail record) throws SQLException;

    /**
     * 批量保存产品关联 字段的记录
     * 
     * @param details
     * @return
     * @throws SQLException
     */
    int batchSaveProductRelationDetail(List<ProductRelationDetail> details) throws SQLException;

    /**
     * 根据产品关联的主键id 批量删除对应的字段信息
     * 
     * @param relationId
     * @return
     * @throws SQLException
     */

    public int batchDelProductRelationDetailByRelationId(List<Long> relationId) throws SQLException;

    /**
     * 根据 relationId 查出 产品关联子表的关于 productRelationDeatil map 对象
     * 
     * @param relationId
     * @return
     * @throws SQLException
     */

    public Map<Long, ProductRelationDetail> getProductRelationDetailByRelationId(Long relationId)
            throws SQLException;

    /**
     * 根据关联子表的主键，删除关联字表的记录
     * 
     * @param relationDetailId
     * @return
     * @throws SQLException
     */

    public int batchDelProductRelationDetailByRelationDetailId(List<Long> relationDetailId)
            throws SQLException;

    /**
     * 批量保存关联子单信息
     * 
     * @param details
     * @return
     * @throws SQLException
     */

    public int batchSaveProductRealtionDetail(List<ProductRelationDetail> details)
            throws SQLException;

    /**
     * 根据relaatinId 查询出skuId 对应productRelationDetail 的map
     * 
     * @param relationId
     * @return
     * @throws SQLException
     */

    public Map<Long, ProductRelationDetail> selectProductRelationDetailMapByRelationId(
            Long relationId) throws SQLException;

}
