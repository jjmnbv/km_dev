package com.kmzyc.promotion.app.dao.impl;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.SuppliersAvailableCategorysDAO;
import com.kmzyc.promotion.app.vobject.Category;
import com.kmzyc.supplier.model.SuppliersAvailableCategorys;
import com.kmzyc.supplier.model.example.SuppliersAvailableCategorysExample;

@Repository("suppliersAvailableCategorysDAO")
@SuppressWarnings({"unchecked", "unused"})
public class SuppliersAvailableCategorysDAOImpl extends BaseDao
    implements
      SuppliersAvailableCategorysDAO {
  /**
   * This field was generated by Apache iBATIS ibator. This field corresponds to the database table
   * SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */

  @Resource
  private SqlMapClient sqlMapClient;

  public SuppliersAvailableCategorysDAOImpl() {}

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int countByExample(SuppliersAvailableCategorysExample example) throws SQLException {
    // mkw 20150819 add

    // end
    Integer count =
        (Integer) sqlMapClient.queryForObject(
            "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_countByExample", example);
    return count.intValue();
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int deleteByExample(SuppliersAvailableCategorysExample example) throws SQLException {
    // mkw 20150819 add

    // end
    int rows =
        sqlMapClient.delete("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_deleteByExample",
            example);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  public int deleteByPrimaryKey(Long sacId) throws SQLException {
    // mkw 20150819 add

    // end
    SuppliersAvailableCategorys key = new SuppliersAvailableCategorys();
    key.setSacId(sacId);
    int rows =
        sqlMapClient
            .delete("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_deleteByPrimaryKey", key);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public void insert(SuppliersAvailableCategorys record) throws SQLException {
    // mkw 20150819 add

    // end
    sqlMapClient.insert("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_insert", record);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public void insertSelective(SuppliersAvailableCategorys record) throws SQLException {
    // mkw 20150819 add

    // end
    sqlMapClient.insert("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_insertSelective", record);
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public List selectByExample(SuppliersAvailableCategorysExample example) throws SQLException {
    // mkw 20150819 add

    // end
    List list =
        sqlMapClient.queryForList("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_selectByExample",
            example);
    return list;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  public SuppliersAvailableCategorys selectByPrimaryKey(Long sacId) throws SQLException {
    // mkw 20150819 add

    // end
    SuppliersAvailableCategorys key = new SuppliersAvailableCategorys();
    key.setSacId(sacId);
    SuppliersAvailableCategorys record =
        (SuppliersAvailableCategorys) sqlMapClient.queryForObject(
            "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_selectByPrimaryKey", key);
    return record;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int updateByExampleSelective(SuppliersAvailableCategorys record,
      SuppliersAvailableCategorysExample example) throws SQLException {
    // mkw 20150819 add

    // end
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows =
        sqlMapClient.update(
            "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_updateByExampleSelective", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int updateByExample(SuppliersAvailableCategorys record,
      SuppliersAvailableCategorysExample example) throws SQLException {
    // mkw 20150819 add

    // end
    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
    int rows =
        sqlMapClient.update("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_updateByExample", parms);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int updateByPrimaryKeySelective(SuppliersAvailableCategorys record) throws SQLException {
    // mkw 20150819 add

    // end
    int rows =
        sqlMapClient.update(
            "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_updateByPrimaryKeySelective", record);
    return rows;
  }

  /**
   * This method was generated by Apache iBATIS ibator. This method corresponds to the database
   * table SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  @Override
  public int updateByPrimaryKey(SuppliersAvailableCategorys record) throws SQLException {
    // mkw 20150819 add

    // end
    int rows =
        sqlMapClient.update("SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_updateByPrimaryKey",
            record);
    return rows;
  }

  /**
   * This class was generated by Apache iBATIS ibator. This class corresponds to the database table
   * SUPPLIERS_AVAILABLE_CATEGORYS
   * 
   * @ibatorgenerated Fri Jan 17 15:19:31 CST 2014
   */
  private static class UpdateByExampleParms extends SuppliersAvailableCategorysExample {
    private final Object record;

    public UpdateByExampleParms(Object record, SuppliersAvailableCategorysExample example) {
      super(example);
      this.record = record;
    }

    public Object getRecord() {
      return record;
    }
  }

  @Override
  public int deleteByPrimaryKey(BigDecimal sacId) throws SQLException {

    return 0;
  }

  @Override
  public SuppliersAvailableCategorys selectByPrimaryKey(BigDecimal sacId) throws SQLException {

    return null;
  }

  @Override
  public List<SuppliersAvailableCategorys> findSupplierCategorys(SuppliersAvailableCategorys cates)
      throws SQLException {
    // mkw 20150819 add

    // end
    return sqlMapClient.queryForList("SUPPLIERS_AVAILABLE_CATEGORYS.categorys_selectBysupplierId",
        cates);
  }

  @Override
  public int deleteSuppCretGory(SuppliersAvailableCategorys gorys) throws SQLException {
    // mkw 20150819 add

    // end
    return sqlMapClient.delete(
        "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_deleteByPrimaryCretgorId", gorys);
  }

  /**
   * 根据供应商id,类目id查询佣金比例
   * 
   * @param cate
   * @return
   */
  @Override
  public SuppliersAvailableCategorys commissionRatioBySuppIdAadCategoryId(
      SuppliersAvailableCategorys cate) throws SQLException {
    // mkw 20150819 add

    // end
    SuppliersAvailableCategorys record =
        (SuppliersAvailableCategorys) sqlMapClient.queryForObject(
            "SUPPLIERS_AVAILABLE_CATEGORYS.ibatorgenerated_selectBysuppIdAndCategoryId", cate);
    return record;
  }

  /**
   * 申请供应商选择类目显示
   * 
   * @param record
   * @return
   * @throws SQLException
   */
  @Override
  public List<Category> applySuppliersCategorys(Long supplierId) throws SQLException {
    List<Category> list = null;
    // mkw 20150819 add

    // end
    if (supplierId == 0) {
      list = sqlMapClient.queryForList("CATEGORY.applySuppliersCategorysAll");
    } else {
      list = sqlMapClient.queryForList("CATEGORY.applySuppliersCategorys", supplierId);
    }
    return list;
  }

  /**
   * 根据供应商id和类目id修改信息
   * 
   * @param record
   * @return
   * @throws SQLException
   */
  @Override
  public int updateBySuppIdAndCateId(SuppliersAvailableCategorys record) throws SQLException {
    // mkw 20150819 add

    // end
    int rows = sqlMapClient.update("SUPPLIERS_AVAILABLE_CATEGORYS.updateBySuppIdAndCateId", record);
    return rows;
  }
}
