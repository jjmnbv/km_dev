package com.kmzyc.promotion.app.dao.impl;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.SectionsDetailDAO;
import com.kmzyc.promotion.app.vobject.ProductHotSellInfoCache;
import com.kmzyc.promotion.app.vobject.SectionsDetail;
import com.kmzyc.promotion.app.vobject.SectionsDetailExample;
import com.kmzyc.promotion.sys.model.SysModelUtil;

@Repository("SectionsDetailDAO")
@SuppressWarnings({"unchecked", "unused"})
public class SectionsDetailDAOImpl extends BaseDao implements SectionsDetailDAO {
    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Resource
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int countByExample(SectionsDetailExample example) throws SQLException {
        // mkw 20150819 add

        // end
        Integer count = (Integer) sqlMapClient
                .queryForObject("SECTIONS_DETAIL.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int deleteByExample(SectionsDetailExample example) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.delete("SECTIONS_DETAIL.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    public int deleteByPrimaryKey(Integer sectionsDetailId) throws SQLException {
        // mkw 20150819 add

        // end
        SectionsDetail key = new SectionsDetail();
        key.setSectionsDetailId(new Long(sectionsDetailId));
        int rows = sqlMapClient.delete("SECTIONS_DETAIL.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public void insert(SectionsDetail record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("SECTIONS_DETAIL.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public void insertSelective(SectionsDetail record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("SECTIONS_DETAIL.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public List selectByExample(SectionsDetailExample example, int skip, int max)
            throws SQLException {
        // mkw 20150819 add

        // end
        List list = sqlMapClient.queryForList("SECTIONS_DETAIL.ibatorgenerated_selectByExample",
                example, skip, max);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    public SectionsDetail selectByPrimaryKey(Integer sectionsDetailId) throws SQLException {
        // mkw 20150819 add

        // end
        SectionsDetail key = new SectionsDetail();
        key.setSectionsDetailId(Long.parseLong(sectionsDetailId.toString()));
        SectionsDetail record = (SectionsDetail) sqlMapClient
                .queryForObject("SECTIONS_DETAIL.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int updateByExampleSelective(SectionsDetail record, SectionsDetailExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("SECTIONS_DETAIL.ibatorgenerated_updateByExampleSelective",
                parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int updateByExample(SectionsDetail record, SectionsDetailExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("SECTIONS_DETAIL.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int updateByPrimaryKeySelective(SectionsDetail record) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient
                .update("SECTIONS_DETAIL.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    @Override
    public int updateByPrimaryKey(SectionsDetail record) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient
                .update("SECTIONS_DETAIL.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table SECTIONS_DETAIL
     * 
     * @ibatorgenerated Tue Jul 30 10:57:37 CST 2013
     */
    private static class UpdateByExampleParms extends SectionsDetailExample {
        private final Object record;

        public UpdateByExampleParms(Object record, SectionsDetailExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    @Override
    public int deleteByPrimaryKey(Long sectionsDetailId) throws SQLException {
        // mkw 20150819 add

        // end
        SectionsDetail key = new SectionsDetail();
        key.setSectionsDetailId(new Long(sectionsDetailId));
        int rows = sqlMapClient.delete("SECTIONS_DETAIL.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    @Override
    public SectionsDetail selectByPrimaryKey(Long sectionsDetailId) throws SQLException {
        return null;
    }

    /**
     * 获取栏目详情列表信息列表
     * 
     * @param page 分页对象
     * @param sections 栏目信息实体
     * @return 分页栏目列表
     * @throws SQLException SQL异常
     */
    @Override
    public Page selectDetailPageByVo(Page page, SectionsDetail vo) throws SQLException {
        // mkw 20150819 add

        // end
        // 用List接收
        List list = sqlMapClient.queryForList("SECTIONS_DETAIL.getSectionsDetailCount", vo);
        SysModelUtil countResult = (SysModelUtil) list.get(0);
        // 总条数
        int recs = countResult.getTheCount().intValue();

        int pagecount = 1;
        // 总页数
        if (recs > 1) {
            pagecount = (recs - 1) / page.getPageSize() + 1;
        }
        page.setRecordCount(recs);
        page.setPageCount(pagecount);

        List pageList = sqlMapClient.queryForList("SECTIONS_DETAIL.searchDtailPageByVo", vo);

        page.setDataList(pageList);
        return page;
    }

    @Override
    public int deleteBySectionsId(Long sectionsId) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.delete("SECTIONS_DETAIL.ibatorgenerated_deleteBySectionsId",
                sectionsId);
        return rows;
    }

    @Override
    public List selectByExample(SectionsDetail detail, int skip, int max) throws SQLException {
        // mkw 20150819 add

        // end
        // 此SQL已注释
        List list = this.getSqlMapClient().queryForList(
                "SECTIONS_DETAIL.selectSectionsDetailBySectionsId", detail, skip, max);
        return list;
    }

    @Override
    public int batchInsertSectionsDetail(List<SectionsDetail> sectionsDetailList)
            throws SQLException {
        // mkw 20150819 add

        // end
        return super.batchInsertDataNt(sectionsDetailList,
                "SECTIONS_DETAIL.ibatorgenerated_insert");
    }

    @Override
    public int batchDeleteSectionsDetail(List<Long> sectionsDetailIds) throws SQLException {
        // mkw 20150819 add

        // end
        return super.batchDeleteByDataPrimaryKeyNt(sectionsDetailIds,
                "SECTIONS_DETAIL.batchDeleteByPrimaryKey");
    }

    @Override
    public int batchUpdateSectionsDetail(List<SectionsDetail> sectionsDetailList)
            throws SQLException {
        // mkw 20150819 add

        // end
        return super.batchUpdateNt(sectionsDetailList, "SECTIONS_DETAIL.updateSectionDetail");
    }

    @Override
    public List<ProductHotSellInfoCache> findHotSellZYCProducts() throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("SECTIONS_DETAIL.findHotSellZYCProducts");
    }

    @Override
    public List<ProductHotSellInfoCache> findHotSellB2BProducts() throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("SECTIONS_DETAIL.findHotSellB2BProducts");
    }

    @Override
    public List<SectionsDetail> selectSectionsDetailByProductId(Long productId)
            throws SQLException {
        // mkw 20150819 add

        // end
        return sqlMapClient.queryForList("SECTIONS_DETAIL.selectSectionsDetailByProductId",
                productId);
    }
}
