package com.kmzyc.promotion.app.dao.impl;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.kmzyc.commons.page.Page;
import com.kmzyc.promotion.app.dao.BaseDao;
import com.kmzyc.promotion.app.dao.SuppliersInfoDAO;
import com.kmzyc.supplier.model.MerchantInfoOrSuppliers;
import com.kmzyc.supplier.model.SuppliersInfo;
import com.kmzyc.supplier.model.example.SuppliersInfoExample;

@Component("suppliersInfoDAO")
@SuppressWarnings({"unchecked", "unused"})
public class SuppliersInfoDAOImpl extends BaseDao implements SuppliersInfoDAO {
    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Resource
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int countByExample(SuppliersInfoExample example) throws SQLException {
        // mkw 20150819 add

        // end
        Integer count = (Integer) sqlMapClient
                .queryForObject("SUPPLIERS_INFO.ibatorgenerated_countByExample", example);
        return count.intValue();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int deleteByExample(SuppliersInfoExample example) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.delete("SUPPLIERS_INFO.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int deleteByPrimaryKey(Long supplierId) throws SQLException {
        // mkw 20150819 add

        // end
        SuppliersInfo key = new SuppliersInfo();
        key.setSupplierId(supplierId);
        int rows = sqlMapClient.delete("SUPPLIERS_INFO.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public void insert(SuppliersInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("SUPPLIERS_INFO.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public void insertSelective(SuppliersInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        sqlMapClient.insert("SUPPLIERS_INFO.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public List selectByExample(SuppliersInfoExample example, Page page) throws SQLException {
        // mkw 20150819 add

        // end
        List list = sqlMapClient.queryForList("SUPPLIERS_INFO.ibatorgenerated_selectByExample",
                example, (page.getPageNo() - 1) * page.getPageSize(), page.getPageSize());
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public SuppliersInfo selectByPrimaryKey(Long supplierId) throws SQLException {
        // mkw 20150819 add

        // end
        SuppliersInfo key = new SuppliersInfo();
        key.setSupplierId(supplierId);
        SuppliersInfo record = (SuppliersInfo) sqlMapClient
                .queryForObject("SUPPLIERS_INFO.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int updateByExampleSelective(SuppliersInfo record, SuppliersInfoExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("SUPPLIERS_INFO.ibatorgenerated_updateByExampleSelective",
                parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int updateByExample(SuppliersInfo record, SuppliersInfoExample example)
            throws SQLException {
        // mkw 20150819 add

        // end
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("SUPPLIERS_INFO.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int updateByPrimaryKeySelective(SuppliersInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.update("SUPPLIERS_INFO.ibatorgenerated_updateByPrimaryKeySelective",
                record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    @Override
    public int updateByPrimaryKey(SuppliersInfo record) throws SQLException {
        // mkw 20150819 add

        // end
        int rows = sqlMapClient.update("SUPPLIERS_INFO.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database
     * table SUPPLIERS_INFO
     * 
     * @ibatorgenerated Tue Jan 14 12:26:03 CST 2014
     */
    private static class UpdateByExampleParms extends SuppliersInfoExample {
        private final Object record;

        public UpdateByExampleParms(Object record, SuppliersInfoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    @Override
    public SuppliersInfo selectBymerId(Long merId) throws SQLException {
        // mkw 20150819 add

        // end
        SuppliersInfo supp = new SuppliersInfo();
        supp.setMerchantId(merId);
        return (SuppliersInfo) sqlMapClient
                .queryForObject("SUPPLIERS_INFO.ibatorgenerated_selectByMerId", supp);
    }

    /**
     * 供应商删除
     */
    @Override
    public int deleteSuppliersByMerId(Long merId) throws SQLException {
        // mkw 20150819 add

        // end
        SuppliersInfo supp = new SuppliersInfo();
        supp.setMerchantId(merId);
        sqlMapClient.delete("SUPPLIERS_INFO.ibatorgenerated_deleteByPrimaryMerId", supp);
        return 0;
    }

    /**
     * 根据商户id查询供应商信息
     */
    @Override
    public SuppliersInfo selectByMerchantId(SuppliersInfo supplier) throws SQLException {
        // mkw 20150819 add

        // end
        return (SuppliersInfo) sqlMapClient.queryForObject("SUPPLIERS_INFO.selectByMerchantId",
                supplier);
    }

    @Override
    public MerchantInfoOrSuppliers selectBysupplyId(Long supplyId) throws SQLException {
        // mkw 20150819 add

        // end
        MerchantInfoOrSuppliers supp = new MerchantInfoOrSuppliers();
        supp.setSupplierId(supplyId);
        return (MerchantInfoOrSuppliers) sqlMapClient
                .queryForObject("SUPPLIERS_INFO.ibatorgenerated_selectBySupplyId", supp);
    }

}
