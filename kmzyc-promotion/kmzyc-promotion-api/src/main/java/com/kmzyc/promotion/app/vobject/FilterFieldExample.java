package com.kmzyc.promotion.app.vobject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unchecked")
public class FilterFieldExample {
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds
	 * to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	protected String orderByClause;

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds
	 * to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public FilterFieldExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	protected FilterFieldExample(FilterFieldExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds
	 * to the database table FILTER_FIELD
	 * 
	 * @ibatorgenerated Tue Aug 06 09:09:03 CST 2013
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;

		protected List criteriaWithSingleValue;

		protected List criteriaWithListValue;

		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value, String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()), property);
		}

		protected void addCriterionForJDBCDate(String condition, List values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List dateList = new ArrayList();
			Iterator iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(((Date) iter.next()).getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andFieldIdIsNull() {
			addCriterion("FIELD_ID is null");
			return this;
		}

		public Criteria andFieldIdIsNotNull() {
			addCriterion("FIELD_ID is not null");
			return this;
		}

		public Criteria andFieldIdEqualTo(BigDecimal value) {
			addCriterion("FIELD_ID =", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdNotEqualTo(BigDecimal value) {
			addCriterion("FIELD_ID <>", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdGreaterThan(BigDecimal value) {
			addCriterion("FIELD_ID >", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdGreaterThanOrEqualTo(BigDecimal value) {
			addCriterion("FIELD_ID >=", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdLessThan(BigDecimal value) {
			addCriterion("FIELD_ID <", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdLessThanOrEqualTo(BigDecimal value) {
			addCriterion("FIELD_ID <=", value, "fieldId");
			return this;
		}

		public Criteria andFieldIdIn(List values) {
			addCriterion("FIELD_ID in", values, "fieldId");
			return this;
		}

		public Criteria andFieldIdNotIn(List values) {
			addCriterion("FIELD_ID not in", values, "fieldId");
			return this;
		}

		public Criteria andFieldIdBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("FIELD_ID between", value1, value2, "fieldId");
			return this;
		}

		public Criteria andFieldIdNotBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("FIELD_ID not between", value1, value2, "fieldId");
			return this;
		}

		public Criteria andFieldNameIsNull() {
			addCriterion("FIELD_NAME is null");
			return this;
		}

		public Criteria andFieldNameIsNotNull() {
			addCriterion("FIELD_NAME is not null");
			return this;
		}

		public Criteria andFieldNameEqualTo(String value) {
			addCriterion("FIELD_NAME =", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameNotEqualTo(String value) {
			addCriterion("FIELD_NAME <>", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameGreaterThan(String value) {
			addCriterion("FIELD_NAME >", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameGreaterThanOrEqualTo(String value) {
			addCriterion("FIELD_NAME >=", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameLessThan(String value) {
			addCriterion("FIELD_NAME <", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameLessThanOrEqualTo(String value) {
			addCriterion("FIELD_NAME <=", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameLike(String value) {
			addCriterion("FIELD_NAME like", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameNotLike(String value) {
			addCriterion("FIELD_NAME not like", value, "fieldName");
			return this;
		}

		public Criteria andFieldNameIn(List values) {
			addCriterion("FIELD_NAME in", values, "fieldName");
			return this;
		}

		public Criteria andFieldNameNotIn(List values) {
			addCriterion("FIELD_NAME not in", values, "fieldName");
			return this;
		}

		public Criteria andFieldNameBetween(String value1, String value2) {
			addCriterion("FIELD_NAME between", value1, value2, "fieldName");
			return this;
		}

		public Criteria andFieldNameNotBetween(String value1, String value2) {
			addCriterion("FIELD_NAME not between", value1, value2, "fieldName");
			return this;
		}

		public Criteria andLastUpdatePersonIsNull() {
			addCriterion("LAST_UPDATE_PERSON is null");
			return this;
		}

		public Criteria andLastUpdatePersonIsNotNull() {
			addCriterion("LAST_UPDATE_PERSON is not null");
			return this;
		}

		public Criteria andLastUpdatePersonEqualTo(String value) {
			addCriterion("LAST_UPDATE_PERSON =", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonNotEqualTo(String value) {
			addCriterion("LAST_UPDATE_PERSON <>", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonGreaterThan(String value) {
			addCriterion("LAST_UPDATE_PERSON >", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonGreaterThanOrEqualTo(String value) {
			addCriterion("LAST_UPDATE_PERSON >=", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonLessThan(String value) {
			addCriterion("LAST_UPDATE_PERSON <", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonLessThanOrEqualTo(String value) {
			addCriterion("LAST_UPDATE_PERSON <=", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonLike(String value) {
			addCriterion("LAST_UPDATE_PERSON like", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonNotLike(String value) {
			addCriterion("LAST_UPDATE_PERSON not like", value, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonIn(List values) {
			addCriterion("LAST_UPDATE_PERSON in", values, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonNotIn(List values) {
			addCriterion("LAST_UPDATE_PERSON not in", values, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonBetween(String value1, String value2) {
			addCriterion("LAST_UPDATE_PERSON between", value1, value2, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdatePersonNotBetween(String value1, String value2) {
			addCriterion("LAST_UPDATE_PERSON not between", value1, value2, "lastUpdatePerson");
			return this;
		}

		public Criteria andLastUpdateDateIsNull() {
			addCriterion("LAST_UPDATE_DATE is null");
			return this;
		}

		public Criteria andLastUpdateDateIsNotNull() {
			addCriterion("LAST_UPDATE_DATE is not null");
			return this;
		}

		public Criteria andLastUpdateDateEqualTo(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE =", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateNotEqualTo(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE <>", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateGreaterThan(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE >", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE >=", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateLessThan(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE <", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE <=", value, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateIn(List values) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE in", values, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateNotIn(List values) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE not in", values, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE between", value1, value2, "lastUpdateDate");
			return this;
		}

		public Criteria andLastUpdateDateNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("LAST_UPDATE_DATE not between", value1, value2, "lastUpdateDate");
			return this;
		}
	}
}